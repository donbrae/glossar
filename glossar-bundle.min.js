/**
 * @name glossar.js
 * @author Jamie Smith
 * @description Scots glossar
 */

var GLOSSAR = (function() {

    var cfg = {
            search_delay: 500 // Number of ms to wait after last keystroke before doing a search. See functions timeoutStart() timeoutCancel()
        },
        state = {
            word: '', // Value of search text box
            timeout: null,
            highlight: 0, // True if at least one word is highlighted in results set
            random: [] // Indexes of which random entries have already been selected
        },
        fuse;

    function init() {
        var options = {
                shouldSort: true,
                includeScore: false,
                tokenize: true,
                matchAllTokens: true,
                findAllMatches: false,
                threshold: 0.05,
                location: 0,
                distance: 15,
                maxPatternLength: 3,
                minMatchCharLength: 5,
                keys: [{
                    name: 'sc',
                    weight: 0.3
                }, {
                    name: 'pt.sc',
                    weight: 0.02
                }, {
                    name: 'pt.tr',
                    weight: 0.005
                }, {
                    name: 'pp.sc',
                    weight: 0.01
                }, {
                    name: 'pp.tr',
                    weight: 0.01
                }, {
                    name: 'pt_pp.sc',
                    weight: 0.01
                }, {
                    name: 'pt_pp.tr',
                    weight: 0.005
                }, {
                    name: 'neg.sc',
                    weight: 0.01
                }, {
                    name: 'neg.tr',
                    weight: 0.01
                }, {
                    name: 'sc_alt',
                    weight: 0.1
                }, {
                    name: 'pr',
                    weight: 0.1
                }, {
                    name: 'en',
                    weight: 0.12
                }, {
                    name: 'tr',
                    weight: 0.3
                }]
            },

            fuse = new Fuse(GLOSSAR.dict, options);

        $('#searchTextbox').on('keyup', function(e) {

            var t;

            function search() {
                if (state.word.length) {
                    $('#result').removeClass('show');
                    print(fuse.search(state.word));
                } else {
                    $('#result').removeClass('show');
                    t = setTimeout(function() {
                        $('#result').html('');
                    }, 100);
                }
            }

            state.word = $.trim($(this).val());

            if (e.code === 'Enter') { // 'Enter' key should allow user to do the search right away, and not wait for the performance-enhancing timeout
                search();
            } else {
                timeoutStart(search);
            }
        });

        $('#random').click(function() {

            var num, word, $btn = $(this);

            function getRandomIndex() {

                if (state.random.length === G.dict.length) { // If all words have been shown
                    state.random = [];
                }

                num = Math.floor(Math.random() * ((G.dict.length - 1) - 0 + 1) + 0);

                if (state.random.indexOf(num) > -1) { // Index already used?
                    getRandomIndex();
                }
            }

            getRandomIndex();

            word = G.dict[num].sc.join ? G.dict[num].sc[0] : G.dict[num].sc;

            $btn.prop('disabled', true);

            state.word = word;
            $('#searchTextbox').val(word);
            $('#result').removeClass('show');
            print(fuse.search(state.word), function() {
                state.random.push(num);
                $btn.prop('disabled', false);
            });
        });

        if ('ontouchstart' in window === false) {
            $('#searchTextbox').focus();
        }
    }

    function noResults() {
        $('#result').html('<li class="text-center no-results">Sorry, the’re nae results for <strong>' + state.word + '</strong></li>');
        $('#result').addClass('show');
    }

    /**
     * Prints data on screen
     * @param {Object} r - Algorithm
     * @param {Function} callback
     */
    function print(r, callback) {
        var grammar, hl_sc_alt,
            hl, hl_all, $li, def, ex, en, pr, pt, pt_arr, pp, pp_arr, pt_pp, pt_pp_arr, neg, or;

        if (r && r.length) {
            $('#result').html('');
            $.each(r, function() {
                grammar = this.gr ? '<span class="grammar">' + [].concat(this.gr).join('; ') + '</span> ' : ''; // Grammar
                sc_alt = this.sc_alt ? '<div class="sc-alt">(alt Scots maks: <span>' + [].concat(this.sc_alt).join(', ') + '</span>)</div> ' : ''; // Alternative Scots spellings
                en = this.en ? formatMultiple(this.en, ',', 'en') : ''; // English
                pr = this.pr ? '<span class="pr">(‘' + [].concat(this.pr).join('’, ‘') + '’)</span> ' : ''; // Pronunciation
                def = this.def ? formatMultiple(this.def, ';', 'def') : ''; // Definition
                ex = this.ex ? formatMultiple(this.ex, ';', 'ex') : ''; // Examples
                or = this.or ? formatOrigin(this.or) : ''; // Origin
                hl_sc_alt = this.sc_alt ? [].concat(this.sc_alt) : []; // Make sure to highlight any alternative Scots words

                /**
                 * Highlight based on trigger words by default; if not, use the specific highlight words
                 */

                // Simpler (Scots) verbs
                pt_arr = this.pt && this.pt.sc ? [].concat(this.pt.sc) : []; // Any past tense
                pt_arr = this.pt && this.pt.tr ? pt_arr.concat(this.pt.tr) : pt_arr; // Any past tense triggers

                pp_arr = this.pp && this.pp.sc ? [].concat(this.pp.sc) : []; // Any past participle
                pp_arr = this.pp && this.pp.tr ? pp_arr.concat(this.pp.tr) : pp_arr; // Any past tense triggers

                pt_pp_arr = this.pt_pp && this.pt_pp.sc ? [].concat(this.pt_pp.sc) : []; // Where Scots past tense and past participle are the same
                pt_pp_arr = this.pt_pp && this.pt_pp.tr ? pt_pp_arr.concat(this.pt_pp.tr) : pt_pp_arr; // triggers

                neg = this.neg ? '<span class="neg">neg. <span>' + [].concat(this.neg.sc).join(', ') + '</span></span>' : ''; // Any Scots negative

                if (this.hl) { // Specific trigger highlight words
                    hl_all = [].concat(this.hl);
                } else if (this.tr) { // Standard triggers
                    hl_all = [].concat(this.tr);
                } else { // No triggers of any kind
                    hl_all = [];
                }
                // Add any alternative Scots words which should trigger highlighting
                if (hl_sc_alt.length) {
                    hl_all = hl_all.concat(hl_sc_alt);
                }
                // Add any phonetic spellings
                if (this.pr) {
                    hl_all = hl_all.concat(this.pr);
                }
                // Add any highlighting words
                if (hl_all.length) {
                    hl = ' data-hl="' + hl_all.filter(G.utils.onlyUnique).join(',') + '"';
                } else {
                    hl = ''; // No trigger words
                }

                pt = pt_arr.length ? '<span class="pt">pt <span data-hl="' + pt_arr.join(',') + '">' + [].concat(this.pt.sc).join(', ') + '</span></span>' : ''; // Past tense (simpler verbs)

                pp = pp_arr.length ? '<span class="pp">ptp <span data-hl="' + pp_arr.join(',') + '">' + [].concat(this.pp.sc).join(', ') + '</span></span>' : ''; // Past participle (simpler verbs)

                pt_pp = pt_pp_arr.length ? '<span class="pt-pp">pt ptp <span data-hl="' + pt_pp_arr.join(',') + '">' + [].concat(this.pt_pp.sc).join(', ') + '</span></span>' : ''; // Identical past tense and past participle (simpler verbs)

                $('#result').append('<li><span class="sc"' + hl + '>' + [].concat(this.sc).join(', ') + '</span> ' +
                    pr +
                    grammar +
                    sc_alt +
                    pt +
                    pp +
                    pt_pp +
                    neg +
                    def +
                    en +
                    ex +
                    or +
                    '</li>');
            });
            highlight(r, function() {
                if (state.highlight) {
                    $($('#result > li').get().reverse()).each(function() { // Move highlighted entries to the top
                        $li = $(this);
                        if ($li.find('span').hasClass('hl')) { // If any of the Scots words (e.g. headword, past tense) is highlighted
                            $li.parent().prepend($li);
                        } else if (state.word.length < 2) { // For one-character queries
                            $li.remove();
                        }
                    });
                }

                if (!state.highlight && state.word.length < 2) {
                    noResults();
                } else {
                    $('#result').addClass('show');
                }

                if (typeof(callback) === 'function') {
                    callback();
                }
            });
        } else {
            noResults();
        }
    }

    function formatOrigin(obj) {
        var origin = [].concat(obj),
            ul = [];

        $.each(origin, function(i) {
            if (this.join) { // If an array
                ul.push(this[0] + ' <span>' + this[1] + '</span>');
            } else { // If a string
                ul.push(this);
            }
        });

        if (ul.length > 1) { // There are multiple (possible) origins

            return '<div class="or-container">Origin: <ul class="or"><li class="list-inline-item">' + ul.join('; </li><li class="list-inline-item">') + '</li></ul></div>';
        } else { // If there is just one origin
            return '<div class="or-container">Origin: ' + ul[0] + '</div>';
        }
    }

    /**
     * Returns a single array of words (to cover multidemensional arrays) for the purposes of highlighting them in the UI
     * @param {Array|String} w
     * @returns {Array}
     */
    function makeSingleArray(w) {
        var words = [];

        // Redd word(s)
        if (w.join) { // Result is an array of values
            $.each(w, function(i) {
                if (this.toString().indexOf(', ') > -1) { // If multiple 'synomyms'
                    words = words.concat(this.toString().split(', ')); // Split any 'synomym' meanings and add to 'words' array
                } else {
                    words = words.concat(this); // Add array to the 'words' array
                }
            });
        } else { // Result is single string
            words.push(w);
        }

        // Make lowercase
        $.each(words, function(i) {
            words[i] = this.toLowerCase();
        });

        return words;
    }

    /**
     * For English words, definitions, examples etc. Creates an <ol> out of an array, or, if passed only a string, returns the original string
     * @param {Array} word
     * @param {String} separator - e.g. ';'
     * @param {String} cl - class, e.g. 'en'
     * @returns {String}
     */
    function formatMultiple(word, separator, cl) {
        var words = [].concat(word), // Make array in case we're passed a string
            ol = [];

        $.each(words, function() {
            if (this.join) { // If an array
                ol.push(this.join(separator + ' ')); // Join array items into a single string
            } else { // If a string
                ol.push(this);
            }
        });

        if (ol.length > 1) { // There are multiple meanings
            return '<ol class="' + cl + '"><li>' + ol.join('</li><li>') + '</li></ol>';
        } else { // If there is just one meaning
            return '<div class="' + cl + '">' + ol[0] + '</div>';
        }
    }

    function highlight(r, callback) {
        var i = r.length - 1;

        state.highlight = 0;

        function hielicht($el, items, en) {
            if ($el.data('hl')) { // Add any highlight words to the items array
                items = items.concat($el.data('hl').split(','));
            }
            $.each(items, function() {
                if (this &&
                    (this.toLowerCase() == state.word.toLowerCase() ||
                        (en && en.indexOf(state.word.toLowerCase()) > -1)
                    )
                ) {
                    $el.addClass('hl');
                    state.highlight = state.highlight + 1;
                    return false; // Exit loop
                }
            });
        }

        // Clear any highlights
        $('.sc, .pt span, .pp span', '#result').each(function() {
            $(this).removeClass('hl');
        });

        // Add any new highlights
        $($('#result > li').get().reverse()).each(function() {

            // Head word(s)
            items = $('.sc', this).text().split(', ');
            hielicht(
                $('.sc', this), // UI element
                items, // Scots words
                r[i].en ? makeSingleArray(r[i].en) : null // Corresponding English words to gar highlighting
            );

            // Past tense
            if ($('.pt', this).length) {
                items = $('.pt span', this).text().split(', ');
                hielicht(
                    $('.pt span', this),
                    items, // Scots words
                    r[i].pt && r[i].pt.tr ? makeSingleArray(r[i].pt.tr) : null // Corresponding trigger words to gar highlighting
                );
            }

            // Past participle
            if ($('.pp', this).length) {
                items = $('.pp span', this).text().split(', ');
                hielicht(
                    $('.pp span', this),
                    items, // Scots words
                    r[i].pp && r[i].pp.tr ? makeSingleArray(r[i].pp.tr) : null
                );
            }

            // Identical past tense and past participle
            if ($('.pt-pp', this).length) {
                items = $('.pt-pp span', this).text().split(', ');
                hielicht(
                    $('.pt-pp span', this),
                    items, // Scots words
                    r[i].pt_pp && r[i].pt_pp.tr ? makeSingleArray(r[i].pt_pp.tr) : null
                );
            }

            // Negative
            if ($('.neg', this).length) {
                items = $('.neg span', this).text().split(', ');
                hielicht(
                    $('.neg span', this),
                    items,
                    r[i].neg && r[i].neg.tr ? makeSingleArray(r[i].neg.tr) : null
                );
            }

            i = i - 1;
        });

        callback();
    }

    function timeoutStart(callback) {

        function start() {
            state.timeout = setTimeout(callback, cfg.search_delay);
        }

        if (!state.timeout) { // If there is no timeout currently running
            start();
        } else { // If there's a timeout in place already
            clearTimeout(state.timeout); // Cancel timeout
            start(); // Start a new one
        }
    }

    return {
        init: init,
        state: state
    };

}());
var GLOSSAR = GLOSSAR || {};

var G = GLOSSAR;

G.notes = {
    a: "protologism; frae analogy wi Dutch an French-influenced <em>Catalonie</em>, <em>Slovenie</em>, <em>Austrailie</em> et al, vs <em>-a</em> or <em>-ia</em> (meanin ‘land’ or ‘steid’) that English haes borraed frae the Laitin", // Syrie, Californie et al
    b: "<em>-ae</em> an <em>-y/-ie</em> steid-name endins kythes Dutch an French influence, vs <em>-a</em> or <em>-ia</em> (meanin ‘land’ or ‘steid’) that English haes borraed frae the Laitin", // Americae, Slovakie et al
    or: {
        af: 'Auld French',
        mf: 'Middle French',
        f: 'French',
        an: 'Anglo-Norman',
        l: 'Laitin',
        nfd: 'northren French dialect',
        ae: 'Auld English',
        me: 'Middle English',
        ms: 'Middle Scots',
        es: 'Early Scots',
        ems: 'Early Middle Scots',
        lms: 'Late Middle Scots',
        emods: 'Early Modren Scots',
        emods2: 'Earlier Modren Scots',
        anor: 'Auld Norse',
        as: 'Aulder Scots',
        md: 'Middle Dutch',
        eme: 'Early Modren English',
        mode: 'Modren English',
        mlg: 'Middle Laich German',
        rl: 'Roman Law',
        it: 'Italians'
    }
};

G.dict = [{
    sc: ['an'],
    sc_alt: 'and',
    en: 'and',
    gr: ['conj']
}, {
    sc: 'anent',
    en: [
        ['opposite', 'in front of', 'before'],
        ['concerning', 'about', 'in view of'],

    ],
    gr: 'prep',
    tr: ['regarding', 're'],
    or: [
        [G.notes.or.as, 'anent'],
        [G.notes.or.ae, 'on efen']
    ]
}, {
    sc: 'anenst',
    en: [
        ['over against', 'opposite'],
        ['in respect of', 'concerning'],

    ],
    tr: ['about', 'regarding', 're'],
    gr: 'prep'
}, {
    sc: 'binna',
    en: 'don\'t be',
    tr: ['do not be', 'binnae'],
    gr: ['imperative']
}, {
    sc: 'binna',
    en: [
        ['unless', 'except']
    ],
    tr: 'binnae',
    gr: ['conj']
}, {
    sc: 'binna',
    en: 'except for',
    tr: 'binnae',
    gr: ['prep', 'líterar']
}, {
    sc: ['because', 'acause'],
    en: 'because',
    gr: ['conj']
}, { // F
    sc: 'forby',
    sc_alt: 'forbye',
    pr: 'forBye',
    en: [
        ['besides', 'in addition to'],
        ['except'],
        ['beside', 'beyond'],
        ['let alone', 'not to mention', 'far from', 'much less']
    ],
    tr: 'also',
    hl: 'forby',
    gr: ['prep']
}, {
    sc: ['fae', 'frae', 'thrae'],
    en: 'from',
    gr: ['prep', 'conj'],
    or: [
        [G.notes.or.as, 'fra, frae'],
        [G.notes.or.anor, 'frá']
    ]
}, {
    sc: 'gif',
    en: 'if',
    tr: 'gin',
    hl: 'gif',
    gr: ['conj'],
    or: [
        [G.notes.or.as + ' haes', 'gif, gyf, iff'],
        [G.notes.or.me + ' haes', 'if'],
        [G.notes.or.ae + ' haes', 'ᵹif']
    ]
}, {
    sc: 'gin',
    en: [
        ['if', 'whether'], 'if only'
    ],
    tr: 'gif',
    hl: 'gin',
    gr: ['conj'],
    or: [
        [G.notes.or.lms + ' haes', 'gin']
    ]
}, { // I
    sc: 'ilk',
    en: [
        ['each one', 'every one']
    ],
    gr: ['pron']
}, {
    sc: 'ilka ane',
    en: [
        ['each one', 'everyone']
    ],
    gr: 'pron'
}, {
    sc: ['wha', 'fa'],
    pr: ['whah', 'whau', 'whae', 'whiu', 'fa', 'a', 'wha'],
    en: 'who',
    tr: ['whae', 'whay', 'whey'],
    gr: 'pron'
}, { // N
    sc: 'naewey',
    en: [
        ['on no account', 'nowhere', 'no way']
    ],
    tr: ['naewye', 'naewhaur', 'nowhere']
}, {
    sc: 'naewhaur',
    en: 'nowhere',
    tr: ['naewhere']
}, {
    sc: 'nor',
    pr: ['naur', 'nir', 'nar'],
    en: ['than', 'and not', '(but) that'],
    gr: ['conj'],
    tr: ['but that'],
    or: [
        [G.notes.or.as, 'nor'],
        [G.notes.or.me, 'nor']
    ]
}, {
    sc: 'ane',
    pr: ['ane', 'een', 'yin', 'wan'],
    en: 'one',
    gr: 'cardinal number',
    tr: ['ae', 'ain', 'ann', 'yae', 'yay'],
    hl: ['ane', 'ain', 'yin', 'wan', 'een', 'ann']
}, {
    sc: 'ony',
    en: [
        ['any', 'either']
    ],
    gr: ['pron'],
    or: 'see adj'
}, { // O
    sc: 'onyane',
    en: 'anyone',
    gr: ['pron']
}, {
    sc: 'our',
    sc_alt: 'oor',
    pr: 'oor',
    en: 'our',
    tr: 'wir',
    hl: 'our',
    gr: ['possesive pronoun']
}, {
    sc: 'wir',
    pr: ['wir', 'wur', 'war', 'weer', 'wor'],
    en: 'our',
    tr: 'oor',
    hl: 'wir',
    gr: ['possesive pronoun']
}, {
    sc: ['whaniver', 'faniver'],
    en: 'whenever',
    tr: ['wheniver', 'fanever']
}, {
    sc: ['whit', 'fit', 'what'],
    pr: ['whit', 'whut', 'what', 'whot', 'fit', 'fut', 'fat', 'ut'],
    en: 'what',
    gr: ['adj', 'adv', 'pron', 'conj']
}, {
    sc: 'wi',
    pr: ['wi', 'wae', 'w'],
    en: 'with',
    gr: ['preposition']
}, {
    sc: ['whiles', 'fyles'],
    pr: ['whilez', 'filez'],
    en: [
        ['while', 'whilst']
    ],
    gr: ['conj']
}, {
    sc: ['thay', 'they'],
    en: 'they',
    tr: ['thai']
}, {
    sc: ['I', 'A', 'ah'],
    en: 'I',
    tr: ['A', 'Ah', 'E', 'Eh', 'eh']
}, {
    sc: 'the',
    en: 'the'
}, {
    sc: ['thare', 'there'],
    en: 'there'
}, {
    sc: ['dinna', 'dinnae'],
    en: [
        ['don\'t', 'do not']
    ],
    tr: ['dinny', 'dont']
}, {
    sc: 'partícular',
    pr: ['purTikyulur', 'purTiklur', 'parTeekyulur', 'parTeeklur'],
    sc_alt: ['parteecular', 'parteicular'],
    en: 'particular',
    tr: 'partiecular',
    gr: 'adj'
}];

G.utils = {
    // Adds <span> around string 's'
    addSpan: function(s) {
        return '<span>' + s + '</span>';
    },
    // Works with filter method to get unique array values
    onlyUnique: function(value, index, self) {
        return self.indexOf(value) === index;
    }
};
G.ex = {
    a: "Alasdair an Ashley wis feart they wadna win at the kirk in time tae be mairit",
    b: "It wis sae thrang Isobel didna knaw whan she wad get out o wark",
    c: "I kenna whit ye mean — ye\'re haiverin, mun!",
    d: "I wadna lat it fash ye",
    e: "The CEO luit skarehauders speir at him efter the tele-collogue",
    f: "Her depute gree’d tae tak in haund the airtin o the policy an its pitten intil effect",
    g: "It wis a gey an braw day"
};
/**
 * Verbs
 */

G.v = {}; // Verbs

// Complex Verbs

// v gae
G.v.gae = {
    sc: ['gae', 'gang', 'gan'],
    en: ['go'],
    tr: ['ging'],
    neg: {
        sc: ['gaena', 'gangna'],
        en: [
            ['do not go', 'go not']
        ],
        tr: ['ganna', 'gingna', 'gona', 'don\'t go'],
        tps: { // > Third person singular
            sc: ['gaesna', 'gangsna', 'gansna'],
            en: [
                ['does not go', 'goes not']
            ],
            tr: ['gingsna', 'goesna', 'doesn\'t go']
        }
    },
    pt: {
        sc: ['gaed', 'went'],
        en: 'went',
        tr: ['gad', 'goed', 'ginged', 'ganged'],
        neg: {
            sc: ['gaedna'],
            en: 'did not go',
        }
    },
    pp: {
        sc: 'gane',
        en: 'gone',
        tr: ['ganed', 'goan', 'gaen'],
    },
    ing: {
        sc: ['gaun', 'gangin', 'gaein'],
        en: 'going',
        tr: ['gingin', 'goin', 'gawn', 'gawin'],
    },
    tps: {
        sc: ['gaes', 'gangs', 'gans'],
        en: 'goes',
        tr: ['gings'],
    }
};
G.v.gae.trigs = [].concat( // Control display of conjugated 'gae'
    G.v.gae.sc, G.v.gae.en, G.v.gae.tr, // gae
    G.v.gae.neg.sc, G.v.gae.neg.en, G.v.gae.neg.tr, // gae neg
    G.v.gae.neg.tps.sc, G.v.gae.neg.tps.en, G.v.gae.neg.tps.tr, // gae neg third person singular
    G.v.gae.pt.sc, G.v.gae.pt.en, G.v.gae.pt.tr, // gae pt
    G.v.gae.pt.neg.sc, G.v.gae.pt.neg.en, // gae pt neg
    G.v.gae.pp.sc, G.v.gae.pp.en, G.v.gae.pp.tr, // gae pp
    G.v.gae.ing.sc, G.v.gae.ing.en, G.v.gae.ing.tr, // gae -ing form
    G.v.gae.tps.sc, G.v.gae.tps.en, G.v.gae.tps.tr // gae third person singular
);
G.v.gae.meta = { // Metadata
    gr_hw: G.utils.addSpan(G.v.gae.sc[0]) + ' etc.' // Which headwords should appear in the grammar definition
};
// gae end

// v be
G.v.be = {
    sc: 'be',
    en: 'be',
    tpps: { // Third person present singular
        sc: 'is',
        en: 'is',
        neg: {
            sc: ['isna', 'isnae'],
            en: [
                ['is not', 'isn\'t']
            ],
        }
    },
    ps: { // Present singular
        sc: 'am',
        en: 'am',
        tr: 'um',
        neg: {
            sc: ['amna', 'amnae'],
            en: [
                ['am not', 'amn\'t']
            ],
            tr: ['umna', 'umnae']
        }
    },
    psp: { // Present singular and plural
        sc: 'are',
        en: 'are',
        tr: ['ur', 'ar'],
        neg: { // Present singular and plural
            sc: ['arena', 'arenae'],
            en: [
                ['are not', 'aren\'t']
            ],
            tr: ['urna', 'urnae', 'arna', 'arnae']
        }
    },
    neg: {
        sc: 'binna',
        en: 'is not',
        tr: ['binnae', 'is no', 'ins\'t']
    }
};
G.v.be.trigs = [].concat( // Control display of conjugated 'be'
    G.v.be.sc, G.v.be.en, // be
    'to be', 'tae be',
    G.v.be.ps.sc, G.v.be.ps.en, G.v.be.ps.tr, // be present singular
    G.v.be.ps.neg.sc, G.v.be.ps.neg.en, G.v.be.ps.neg.tr, // neg
    G.v.be.tpps.sc, G.v.be.tpps.en, // be third present present singular
    G.v.be.tpps.neg.sc, G.v.be.tpps.neg.en, // neg
    G.v.be.psp.sc, G.v.be.psp.en, // be present singular and plural
    G.v.be.psp.neg.sc, G.v.be.psp.neg.en, G.v.be.psp.neg.tr, // neg
    G.v.be.neg.sc, G.v.be.neg.en, G.v.be.neg.tr // be neg
);
// be end

// v wis
G.v.wis = {
    sc: 'wis',
    pr: ['waz', 'wez', 'wiz', 'wuz'],
    en: [
        ['was', 'had been']
    ],
    sc_alt: 'wes',
    tr: 'wus',
    neg: {
        sc: ['wisna', 'wisnae'],
        en: [
            ['was not', 'wasn\'t', 'had not been']
        ],
        tr: ['wasnae', 'wasna', 'wesna', 'wesnae', 'wiznae', 'wizna', 'wuznae', 'wuzna']
    }
};
G.v.wis.trigs = [].concat(
    G.v.wis.sc, G.v.wis.pr, G.v.wis.en, G.v.wis.sc_alt, G.v.wis.tr, // wis
    G.v.wis.neg.sc, G.v.wis.neg.en, G.v.wis.neg.tr // neg
);
// wis end

// v wis
G.v.war = {
    sc: 'war',
    pr: ['war', 'wir', 'wur'],
    en: [
        ['were', 'had been']
    ],
    sc_alt: 'were',
    neg: {
        sc: ['warna', 'warnae'],
        en: [
            ['were not', 'weren\'t', 'had not been']
        ],
        tr: ['werena', 'werenae', 'wirna', 'wirnae']
    }
};
G.v.war.trigs = [].concat(
    G.v.war.sc, G.v.war.pr, G.v.war.en, G.v.war.sc_alt, G.v.war.tr, // war
    G.v.war.neg.sc, G.v.war.neg.en, G.v.war.neg.tr // neg
);
// wis end

// v hae
G.v.hae = {
    sc: ['hae', 'hiv'],
    en: 'have',
    pr: ['hae', 'ha', 'a', 'hiv', 'huv', 'hev'],
    neg: {
        sc: ['haena', 'hinna', 'hivna'],
        sc_alt: ['haenae', 'hinnae', 'hivnae'],
        en: [
            ['have not', 'haven\'t']
        ],
        tr: ['huvnae', 'huvna', 'havenae']
    },
    ps: { // Present singular
        sc: 'haes',
        sc_alt: 'hes',
        en: 'has',
        pr: ['hez', 'hiz', 'huz'],
        tr: ['his', 'hus'],
        neg: {
            sc: ['haesna', 'haesnae'],
            en: [
                ['has not', 'hasn\'t']
            ],
            tr: ['hesna', 'hisnae', 'hisna', 'hiznae', 'husnae']
        }
    },
    pt: {
        sc: 'haed',
        en: 'had',
        pr: ['haid', 'hed', 'hid', 'hud'],
        neg: {
            sc: ['haedna', 'haednae'],
            en: [
                ['had not', 'hadn\'t']
            ],
            tr: ['hudnae', 'hidnae', 'hidna', 'hudna']
        }
    },
    ptp: {
        sc: ['haed', 'haen'],
        en: 'had',
        sc_alt: 'hed',
        pr: ['haid', 'hed', 'hid', 'hud', 'hain']
    }
};
G.v.hae.trigs = [].concat( // Control display of conjugated 'hae'
    G.v.hae.sc, G.v.hae.en, G.v.hae.pr, // hae
    G.v.hae.neg.sc, G.v.hae.neg.sc_alt, G.v.hae.neg.en, G.v.hae.neg.tr, // hae neg
    G.v.hae.ps.sc, G.v.hae.ps.sc_alt, G.v.hae.ps.en, G.v.hae.ps.pr, G.v.hae.ps.tr, // hae present singular
    G.v.hae.ps.neg.sc, G.v.hae.ps.neg.en, G.v.hae.ps.neg.tr, // hae neg present singular
    G.v.hae.pt.sc, G.v.hae.pt.en, G.v.hae.pt.pr, // hae past tense
    G.v.hae.pt.neg.sc, G.v.hae.pt.neg.en, G.v.hae.pt.neg.tr, // hae neg past tense
    G.v.hae.ptp.sc, G.v.hae.ptp.sc_alt, G.v.hae.ptp.pr // hae past participle
);
// hae end

// ken and knaw triggers
G.v.ken_knaw = {};
G.v.ken_knaw.trigs = ['ken', 'know', 'kenna', 'know not', 'kent', 'kenned', 'knew', 'kentna', 'knew not', 'did not know', 'didn\'t know', 'known', 'knaw', 'knawed', 'knawn'];

// lat triggers
G.v.lat = {};
G.v.lat.trigs = ['allow', 'permit', 'cause', 'make happen', 'luit', 'latten', 'luiten', 'lit', 'lat', 'lit', 'leet', 'löt', 'lüt'];

/**
 * Add verbs (both complex and more simple) to dictionary object
 */

G.dict.push({
        sc: 'accress',
        pt_pp: {
            sc: 'accressed',
            tr: ['increased', 'accrued', 'grown', 'grew']
        },
        en: ['accrue', ['increase', 'grow']],
        gr: 'v',
        tr: 'added',
        hl: 'accress',
        or: [
            [G.notes.or.as, 'accress, accresce'],
            ['frae the ' + G.notes.or.rl + ' term', 'accrescere']
        ]
    }, { // A
        sc: 'adduce',
        en: ['cite as pertinent, quote as evidence'],
        tr: 'pertain',
        hl: 'adduce',
        gr: 'v',
        or: [
            [G.notes.or.l, 'adūcere']
        ]
    }, {
        sc: 'adduce',
        def: ['lat see (an item o) evidence in proof', 'bring forrit a witness'],
        gr: ['v', 'law']
    }, {
        sc: 'appluise',
        en: [
            ['offer, make available, make known']
        ],
        gr: 'v'
    },
    // v be
    {
        sc: G.v.be.sc,
        en: G.v.be.en,
        tr: G.v.be.trigs, // Highlighted by default
        hl: [].concat(G.v.be.en, 'to be', 'tae be'),
        gr: 'v'
    }, { // am
        sc: G.v.be.ps.sc,
        en: G.v.be.ps.en,
        tr: G.v.be.trigs,
        hl: [].concat(G.v.be.ps.en, G.v.be.ps.tr),
        gr: 'praisent singular o v ' + G.utils.addSpan('tae ' + G.v.be.sc)
    }, { // amna
        sc: G.v.be.ps.neg.sc,
        en: G.v.be.ps.neg.en,
        tr: G.v.be.trigs,
        hl: [].concat(G.v.be.ps.neg.en, G.v.be.ps.neg.tr),
        gr: 'praisent singular neg o v ' + G.utils.addSpan('tae ' + G.v.be.sc)
    }, { // is
        sc: G.v.be.tpps.sc,
        en: G.v.be.tpps.en,
        tr: G.v.be.trigs,
        hl: [].concat(G.v.be.tpps.en),
        gr: 'third person praisent singular o v ' + G.utils.addSpan('tae ' + G.v.be.sc)
    }, { // isna
        sc: G.v.be.tpps.neg.sc,
        en: G.v.be.tpps.neg.en,
        tr: G.v.be.trigs,
        hl: [].concat(G.v.be.tpps.neg.en),
        gr: 'third person praisent singular neg o v ' + G.utils.addSpan('tae ' + G.v.be.sc)
    }, { // are
        sc: G.v.be.psp.sc,
        en: G.v.be.psp.en,
        tr: G.v.be.trigs,
        hl: [].concat(G.v.be.psp.en, G.v.be.psp.tr),
        gr: 'praisent singular an plural o v ' + G.utils.addSpan('tae ' + G.v.be.sc)
    }, { // arena
        sc: G.v.be.psp.neg.sc,
        en: G.v.be.psp.neg.en,
        tr: G.v.be.trigs,
        hl: [].concat(G.v.be.psp.neg.en, G.v.be.psp.neg.tr),
        gr: 'praisent singular an plural neg o v ' + G.utils.addSpan('tae ' + G.v.be.sc)
    }, { // binna
        sc: G.v.be.neg.sc,
        en: G.v.be.neg.en,
        tr: G.v.be.trigs,
        hl: [].concat(G.v.be.neg.en, G.v.be.neg.tr),
        gr: 'neg o v ' + G.utils.addSpan('tae ' + G.v.be.sc) + '; líterar'
    },
    // v be end
    { // C
        sc: 'complouther',
        en: [
            ['mix or associate with'],
            ['agree, coincide or fit in with']
        ],
        pt_pp: {
            sc: 'complouthert'
        },
        tr: ['compluter', 'compluther', 'comploother', 'agree', 'coincide', 'fit in'],
        gr: 'v',
        or: 'see n'
    }, {
        sc: 'comprise',
        en: [
            ['include', 'contain', 'consist of'],
            ['appraise', 'value']
        ],
        tr: 'make up',
        hl: 'comprise',
        gr: 'v',
        or: [
            [G.notes.or.as, 'comprise, compryse, comprize'],
            [G.notes.or.mf, 'compris']
        ]
    }, {
        sc: 'contrair',
        en: [
            ['oppose', 'contradict', 'go contrary to']
        ],
        gr: 'v',
        or: 'see n'
    }, { // D
        sc: 'defeat',
        pr: ['defait', 'defeet'],
        en: 'defeat',
        pt_pp: {
            sc: 'defeat',
            tr: ['defeated', 'defait', 'defeet']
        },
        ex: 'Hibs war defeat by Hearts in the Cup final on Seturday',
        gr: 'v',
        or: [
            [G.notes.or.as, 'defait', 'defett'], G.notes.or.af + ' <span>desfait</span>, ptp o <span>desfaire</span>'
        ]
    }, {
        sc: 'depute',
        pt_pp: {
            sc: 'depute',
            tr: 'deputised'
        },
        // en: 'deputise',
        def: 'apynt as depute',
        gr: 'v',
        ex: 'Aaron wis depute tae cover for his manager at the comatee meetin',
        or: 'see adj'
    }, {
        sc: 'deburse',
        en: 'disburse',
        def: 'pey out (siller frae a fund)',
        gr: 'v',
        or: [
            [G.notes.or.as, 'deburs, debours'],
            [G.notes.or.mf, 'desbourser']
        ]
    }, { // E
        sc: 'ettle',
        en: [
            ['intend', 'plan', 'propose'],
            'take aim at', ['attempt', 'venture'],
            'desire very much'
        ],
        pt_pp: {
            sc: 'ettelt',
            tr: ['intended', 'planned', 'proposed', 'attempted', 'ventured']
        },
        tr: ['aim', 'desire', 'ettlin'],
        hl: ['aim', 'desire'],
        gr: 'v',
        or: [
            [G.notes.or.as, 'ettle, ettill'],
            [G.notes.or.anor, 'ætla']
        ]
    }, {
        sc: 'ettlin',
        en: [
            ['endeavouring', 'trying']
        ],
        tr: ['attempting', 'ettle'],
        hl: ['ettlin'],
        gr: ['v']
    }, {
        sc: 'evite',
        pr: ['evite', 'eveet'],
        en: [
            ['avoid', 'escape', 'shun', 'evade']
        ],
        pt_pp: {
            sc: 'evitit',
            tr: ['avoided', 'escaped', 'shunned', 'evaded', 'evited']
        },
        gr: 'v',
        or: [
            [G.notes.or.as, 'evit(e), eveit'],
            [G.notes.or.f, 'éviter'],
            [G.notes.or.l, 'ēvītāre']
        ],
        ex: 'He ettelt tae evite bein liftit by the polis'
    },
    // v gae
    { // v gae
        sc: G.v.gae.sc,
        en: G.v.gae.en,
        tr: G.v.gae.trigs,
        hl: [].concat(G.v.gae.en, G.v.gae.tr), // Overrides tr highlighting above, as here we don't want all the tr words being highlighted
        gr: 'v'
    }, { // v gae neg
        sc: G.v.gae.neg.sc,
        en: G.v.gae.neg.en,
        tr: G.v.gae.trigs,
        hl: [].concat(G.v.gae.neg.en, G.v.gae.neg.tr),
        gr: 'neg o ' + G.v.gae.meta.gr_hw
    }, { // v gae neg third person singular
        sc: G.v.gae.neg.tps.sc,
        en: G.v.gae.neg.tps.en,
        tr: G.v.gae.trigs,
        hl: [].concat(G.v.gae.neg.tps.en, G.v.gae.neg.tps.tr),
        gr: 'neg third person singular o ' + G.v.gae.meta.gr_hw
    }, { // v gae pt
        sc: G.v.gae.pt.sc,
        en: G.v.gae.pt.en,
        tr: G.v.gae.trigs, // So this is triggered when 'go' is entered
        hl: G.v.gae.pt.tr, // Which trigger words should cause the headwords to be highlighted
        // gr: ['pt o <span>' + [].concat(G.v.gae.sc).join(', ')] + '</span>'
        gr: 'pt o ' + G.v.gae.meta.gr_hw
    }, { // v gae pt neg
        sc: G.v.gae.pt.neg.sc,
        en: G.v.gae.pt.neg.en,
        tr: G.v.gae.trigs,
        hl: G.v.gae.pt.neg.en,
        gr: 'neg pt o ' + G.v.gae.meta.gr_hw
    }, { // v gae pp
        sc: G.v.gae.pp.sc,
        en: G.v.gae.pp.en,
        tr: G.v.gae.trigs,
        hl: G.v.gae.pp.tr,
        gr: 'pp o ' + G.v.gae.meta.gr_hw
    }, { // v gae -ing form
        sc: G.v.gae.ing.sc,
        en: G.v.gae.ing.en,
        tr: G.v.gae.trigs,
        hl: G.v.gae.ing.tr
    }, { // v Third person singular
        sc: G.v.gae.tps.sc,
        en: G.v.gae.tps.en,
        tr: G.v.gae.trigs,
        hl: G.v.gae.tps.tr,
        gr: 'third person singular o ' + G.v.gae.meta.gr_hw

    },
    // v gae end
    {
        sc: 'compone',
        en: [
            ['come to an agreement', 'settle a dispute with payment'],
            ['compound', 'combine'],
            'compose in speech or writing',
            'compound a payment for a certain sum',
            'compose or calm oneself'
        ],
        tr: ['compose', 'calm', 'settle'],
        gr: ['v', 'merkit obsolete in CSD2']
    }, {
        sc: 'compone',
        en: 'compose (in music, speech or writing)',
        tr: ['compose', 'write'],
        hl: 'compose',
        gr: ['v'],
        or: [
            ['protologism, frae the ' + G.notes.or.as, 'compone <span>‘to compose, make by combination’</span>'],
            [G.notes.or.l, 'compōnere']
        ]
    }, {
        sc: 'jalouse',
        en: ['suspect', ['suppose', 'guess', 'surmise']],
        pr: 'jaLooz',
        pt: {
            sc: 'jaloused'
        },
        gr: 'v',
        tr: ['jaloose'],
        or: [
            'this uissage first kythes in ' + G.notes.or.lms, [G.notes.or.f, 'jalouser']
        ]
    }, {
        sc: 'dounlaid',
        pt: {
            sc: 'dounlaidit',
            en: 'downloaded',
            tr: 'doonloadit'
        },
        def: '<em>v</em> copy data frae ae computer sýstem til anither, for ordinar owre the internet; <em>n</em> the data (file) dounlaidit',
        pr: 'doonlaid',
        gr: ['v', 'n'],
        tr: ['doonload', 'download'],
        or: [
            [G.notes.or.mode, 'download']
        ]
    }, {
        sc: 'edify',
        en: [
            ['instruct', 'enlighten']
        ],
        gr: 'v',
        or: [
            [G.notes.or.as, 'edify, edifie'],
            [G.notes.or.mf, 'edifier'],
            [G.notes.or.l, 'aedificāre']
        ]
    }, {
        sc: 'effeir',
        pr: 'iFeer',
        en: [
            ['belong to', 'pertain to', 'be appropriate to', 'be fitting or proper']
        ],
        gr: 'v',
        tr: ['effeirin tae', 'effeirin til'],
        hl: ['effeir', 'be fitting', 'be proper'],
        or: [
            [G.notes.or.as, 'affer(e), effere'],
            [G.notes.or.an + ', ' + G.notes.or.af, 'aferir']
        ]
    }, {
        sc: ['effeirin tae/til'],
        pr: ['iFeerin tae', 'iFeerin til'],
        en: [
            ['pertaining to', 'belonging to'],
            ['in relation to', 'in proportion to', 'corresponding to']
        ],
        tr: ['effeir', 'relating to', 'according to'],
        hl: ['effeirin tae', 'effeirin til', 'relating to'],
        or: 'see v <span>effeir</span>'
    }, {
        sc: 'haud',
        pr: ['haud', 'hod', 'hud', 'had'],
        en: [
            ['have', 'keep in the hand', 'hold onto', 'possess'],
            ['confine', 'detain', 'hinder', 'restrain'],
            ['continue as before'],
            'arrange an event', ['continue', 'proceed', 'keep to a path or route'],
            ['observe', 'adhere to', 'maintain'],
            ['contain', 'keep within'],
            ['restrain oneself', 'prevent']
        ],
        pt: {
            sc: ['haudit', 'held']
        },
        gr: 'v'
    }, {
        sc: 'hauden',
        en: 'be obliged or required to do something',
        tr: ['obliged', 'required'],
        gr: ['pp o v <span>haud</span>']
    }, {
        sc: 'haud aff',
        en: 'keep off or away',
        tr: ['keep off', 'keep away'],
        gr: 'phrasal v'
    }, {
        sc: 'haud at',
        en: [
            ['persist in', 'keep at']
        ],
        tr: ['haud at', 'persist at', 'persevere at'],
        gr: 'phrasal v'
    }, {
        sc: 'haud awa',
        en: [
            ['keep away', 'keep out or off'],
            ['continue on one\'s way', 'go away']
        ],
        tr: ['keep out', 'keep off', 'continue'],
        gr: 'phrasal v'
    }, {
        sc: 'haud for',
        en: [
            ['aim at', 'make for']
        ],
        gr: 'phrasal v'
    }, {
        sc: 'haud forrit',
        en: 'continue to improve (in health)',
        tr: 'continue to improve',
        gr: 'phrasal v'
    }, {
        sc: 'haud gaun',
        en: 'keep going',
        gr: 'phrasal v'
    }, {
        sc: 'haud haul',
        en: [
            ['offer resistance', 'prop', 'support']
        ],
        gr: 'phrasal v'
    }, {
        sc: 'haud in',
        en: [
            ['confine', 'retain', 'restrain', 'keep in order'],
            ['save', 'economize', 'be miserly']
        ],
        gr: 'phrasal v'
    }, {
        sc: 'haud in about',
        pr: 'haud in aboot',
        en: [
            ['keep in order', 'restrain', 'control'],
            ['bring', 'come closer']
        ],
        gr: ['phrasal v']
    }, {
        sc: 'haud in wi',
        en: [
            ['keep in with', 'curry favour with'],
        ],
        gr: ['phrasal v']
    }, {
        sc: 'haud on',
        en: [
            ['carry on', 'continue'],
        ],
        gr: ['phrasal v']
    }, {
        sc: 'haud on',
        en: 'stop',
        gr: ['imp phrasal v']
    }, { // I
        sc: 'inbring',
        pt_pp: {
            sc: 'inbrocht',
            tr: ['imported', 'importit', 'conveyed']
        },
        en: [
            ['bring to or into a place', 'convey', 'import']
        ],
        tr: ['bring to a place', 'bring into a place'],
        gr: 'v',
        or: [
            [G.notes.or.ae, 'inbrengan']
        ],
        ex: ['O the guids an services Scotland inbrings, around 60 per cent is thocht tae be frae the lave o the Unitit Kinrick', 'a new pipe netwark inbrocht watter tae the house']
    }, {
        sc: 'ken',
        en: 'know',
        neg: {
            sc: 'kenna',
            tr: 'know not'
        },
        tr: G.v.ken_knaw.trigs,
        hl: 'ken',
        gr: 'v',
        ex: G.ex.c
    }, {
        sc: ['kent', 'kenned'],
        en: ['knew'],
        neg: {
            sc: 'kentna',
            tr: ['knew not', 'did not know', 'didn\'t know']
        },
        tr: G.v.ken_knaw.trigs,
        hl: ['kent', 'kenned'],
        gr: 'pt o v ' + G.utils.addSpan('tae ken'),
        ex: 'Tammas kentna whit tae dae'
    }, {
        sc: 'kent',
        en: 'known',
        gr: ['adj, an ptp o v ' + G.utils.addSpan('tae ken')],
        ex: 'Brian is a weel kent face on the Edinburgh jazz scene',
        tr: G.v.ken_knaw.trigs,
        hl: 'kent'
    }, {
        sc: 'knaw',
        en: 'know',
        pt: {
            sc: ['knew', 'knawed'],
            tr: ['knew']
        },
        pp: {
            sc: 'knawn',
            tr: 'known'
        },
        tr: G.v.ken_knaw.trigs,
        ex: G.ex.b,
        hl: 'knaw',
        gr: 'v'
    }, { // L
        sc: 'lat',
        en: 'let',
        pr: ['lat', 'lit'],
        tr: G.v.lat.trigs,
        hl: ['allow', 'permit', 'cause', 'make happen'],
        gr: 'v',
        ex: ['Lat’s hae a drink efter wark', G.ex.d],
        or: [
            [G.notes.or.as, 'lat, let, lete'],
            [G.notes.or.ae, 'lǽtan']
        ]
    }, {
        sc: 'luit',
        en: 'let',
        tr: G.v.lat.trigs,
        hl: 'luit',
        pr: ['lit', 'leet', 'löt', 'lüt'],
        gr: 'pt o the v <span>tae lat</span>',
        ex: G.ex.e
    }, {
        sc: ['latten', 'luiten'],
        en: 'let',
        tr: G.v.lat.trigs,
        hl: ['latten', 'luiten'],
        gr: 'ptp o the v <span>tae lat</span>',
        ex: 'John haed been latten doun by his colleague'
    }, { // M
        sc: 'maun',
        pr: ['maun', 'mon', 'man', 'mun'],
        en: 'must',
        neg: {
            sc: ['maunna', 'maunnae'],
            tr: ['must not', 'mustn\'t']
        },
        gr: ['v'],
        or: [
            [G.notes.or.as, 'man'],
            [G.notes.or.me + ' (afore 1400-50)', 'man'],
            [G.notes.or.anor, 'muna > man']
        ],
        ex: ['Ye maun be jokin!', 'He maunna hae been able tae come', 'The essay maunna be owre 3,000 wirds']
    }, {
        sc: 'mind',
        pt: {
            sc: 'mindit',
            en: ['reminded', 'remembered', 'recollected', 'called to mind']
        },
        en: ['remind', ['remember', 'recollect', 'call to mind']],
        gr: 'v',
        or: [
            [G.notes.or.as, 'minde, mynd(e)'],
            [G.notes.or.ae, 'mynd']
        ]
    }, {
        sc: 'uplaid',
        tr: 'upload',
        pt: {
            sc: 'uplaidit',
            en: 'uploaded',
            tr: 'uploadit'
        },
        def: '<em>v</em> copy data frae ae computer sýstem til anither, for ordinar til a server, an aften owre the internet; <em>n</em> the data (file) uplaidit',
        gr: ['v', 'n'],
        or: [
            [G.notes.or.mode, 'upload']
        ]
    }, { // F
        sc: 'fankle',
        en: [
            ['tangle', 'mix up'], 'become tangled', ['trap', 'ensnare'],
            ['stumble', 'fumble']
        ],
        pt_pp: {
            sc: 'fankelt',
            tr: ['tangled', 'mixed up', 'trapped', 'ensnared', 'stumbled', 'fumbled']
        },
        gr: 'v',
        or: 'see n'
    }, {
        sc: ['fash'],
        en: [
            ['irritate', 'annoy', 'anger', 'inconvenience'],
            ['take trouble over', 'take pains with'],
            ['vex', 'bother'],
            ['fret']
        ],
        pt_pp: {
            sc: 'fasht',
            tr: [
                ['irritated', 'annoyed', 'angered', 'inconvenienced', 'troubled', 'vexed', 'bothered', 'fretted', 'fashed']
            ]
        },
        neg: {
            sc: 'fashna',
            tr: ['fash not', 'fash na']
        },
        gr: 'v',
        or: [
            [G.notes.or.ms, 'fasch, fash'],
            [G.notes.or.mf, 'faschier']
        ],
        ex: ['Dinna fash yersel', 'I wis sair fasht anent the job interview', G.ex.d]
    }, // H
    { // hae
        sc: G.v.hae.sc,
        pr: G.v.hae.pr,
        en: G.v.hae.en,
        tr: G.v.hae.trigs,
        hl: G.v.hae.sc,
        gr: 'v'
    }, { // hae neg
        sc: G.v.hae.neg.sc,
        sc_alt: G.v.hae.neg.sc_alt,
        pr: G.v.hae.neg.pr,
        en: G.v.hae.neg.en,
        tr: G.v.hae.trigs,
        hl: [].concat(G.v.hae.neg.sc, G.v.hae.neg.tr),
        gr: 'neg o the v ' + G.utils.addSpan('tae ' + G.v.hae.sc.join(', '))
    }, { // hae present singular
        sc: G.v.hae.ps.sc,
        sc_alt: G.v.hae.ps.sc_alt,
        en: G.v.hae.ps.en,
        pr: G.v.hae.ps.pr,
        tr: G.v.hae.trigs,
        hl: [].concat(G.v.hae.ps.sc, G.v.hae.ps.tr),
        gr: 'present singular o the v ' + G.utils.addSpan('tae ' + G.v.hae.sc.join(', '))
    }, { // hae present singular neg
        sc: G.v.hae.ps.neg.sc,
        en: G.v.hae.ps.neg.en,
        tr: G.v.hae.trigs,
        hl: [].concat(G.v.hae.ps.neg.sc, G.v.hae.ps.neg.tr),
        gr: 'neg present singular o the v ' + G.utils.addSpan('tae ' + G.v.hae.sc.join(', '))
    }, { // hae past tense
        sc: G.v.hae.pt.sc,
        pr: G.v.hae.pt.pr,
        en: G.v.hae.pt.en,
        tr: G.v.hae.trigs,
        hl: [].concat(G.v.hae.pt.sc),
        gr: 'pt o the v ' + G.utils.addSpan('tae ' + G.v.hae.sc.join(', '))
    }, { // hae neg past tense
        sc: G.v.hae.pt.neg.sc,
        en: G.v.hae.pt.neg.en,
        tr: G.v.hae.trigs,
        hl: [].concat(G.v.hae.pt.neg.sc, G.v.hae.pt.neg.tr),
        gr: 'neg pt o the v ' + G.utils.addSpan('tae ' + G.v.hae.sc.join(', '))
    }, { // hae past par
        sc: G.v.hae.ptp.sc,
        en: G.v.hae.ptp.en,
        pr: G.v.hae.ptp.pr,
        tr: G.v.hae.trigs,
        hl: [].concat(G.v.hae.ptp.sc, G.v.hae.ptp.pr),
        gr: 'pp o the v ' + G.utils.addSpan('tae ' + G.v.hae.sc.join(', '))
    }, { // O
        sc: 'ocht',
        en: 'ought',
        gr: 'v'
    }, { // T
        sc: 'tred',
        en: 'trade',
        gr: 'v'
    }, {
        sc: 'tuim',
        en: [
            'empty a container', ['pour', 'empty out'],
            'discharge (a gun or shot)',
            'drain water from (potatoes)',
            '<span>(of water)</span> flow or gush copiously', ['<span>(of rain)</span> to pour', 'come down in torrents']
        ],
        pt_pp: {
            sc: 'tuimt',
            tr: ['emptied', 'emptied out',
                'discharge', 'drained', 'gushed', 'poured'
            ]
        },
        tr: ['empty', 'gush'],
        gr: 'v',
        or: 'frae the adj',
        ex: 'He tuimt the watter doun the cundie'
    }, { // R
        sc: 'rax',
        en: [
            ['reach', 'stretch']
        ],
        gr: 'v',
        pt_pp: {
            sc: ['raxed', 'raxt'],
            en: ['reached', 'stretched']
        }
    }, {
        sc: 'redd',
        en: [
            ['clear', 'rid'], 'clarify'
        ],
        gr: 'v'
    }, { // S
        sc: 'skare',
        en: 'share',
        gr: 'v',
        or: [
            [G.notes.or.as, 'skar, scar(e), schare'],
            ['?' + G.notes.or.anor, 'skera'],
            ['?' + G.notes.or.md, 'scare, scaer']
        ]
    }, {
        sc: 'swither',
        en: [
            ['doubt', 'falter', 'hesitate', 'dither']
        ],
        tr: ['ditter', 'doiter'],
        hl: 'swither',
        gr: 'v',
        ex: 'Dinna swither, min — haud gaun!',
        or: ['doutsome; first kythes (as a verb) in ' + G.notes.or.ms]
    }, {
        sc: 'uise',
        pr: ['yöz', 'yüz', 'öz', 'yaiz', 'ees'],
        en: 'use',
        tr: ['yaise', 'uiss', 'yiss', 'yaize'],
        hl: ['yaise', 'yaize', 'uise', 'yaiz', 'ees'],
        gr: 'v'
    }, {
        sc: 'upsteer',
        sc_alt: 'upsteir',
        en: [
            ['stir up', 'throw into turmoil', 'stimulate', 'encourage', 'arouse', 'incite']
        ],
        tr: 'rouse',
        gr: 'v'
    },
    // v wis
    {
        sc: G.v.wis.sc,
        sc_alt: G.v.wis.sc_alt,
        pr: G.v.wis.pr,
        en: G.v.wis.en,
        tr: [].concat(G.v.war.trigs, G.v.wis.trigs),
        hl: [].concat(G.v.wis.sc, G.v.wis.pr, G.v.wis.tr),
        gr: 'v'
    }, { // wis neg
        sc: G.v.wis.neg.sc,
        en: G.v.wis.neg.en,
        tr: [].concat(G.v.war.trigs, G.v.wis.trigs),
        hl: [].concat(G.v.wis.neg.sc, G.v.wis.neg.tr),
        gr: ['neg o v ' + G.utils.addSpan(G.v.wis.sc)]
    },
    // v wis end
    // v war
    {
        sc: G.v.war.sc,
        sc_alt: G.v.war.sc_alt,
        pr: G.v.war.pr,
        en: G.v.war.en,
        tr: [].concat(G.v.war.trigs, G.v.wis.trigs),
        hl: [].concat(G.v.war.sc, G.v.war.pr),
        gr: 'v'
    }, { // war neg
        sc: G.v.war.neg.sc,
        en: G.v.war.neg.en,
        tr: [].concat(G.v.war.trigs, G.v.wis.trigs),
        hl: [].concat(G.v.war.neg.sc, G.v.war.neg.tr),
        gr: ['neg o v ' + G.utils.addSpan(G.v.war.sc)]
    }
    // v war end
);
/**
 * Adjectives
 */

G.adj = {}; // More complex adjectives

G.adj.guid = {
    trigs: ['gwid', 'geed'],
    pr: ['gid', 'gyid', 'göd', 'gweed']
};

/**
 * Add adjectives to dictionary object
 */

G.dict.push({ // A
    sc: 'ae',
    pr: ['ae', 'yae'],
    en: ['one', 'only'],
    gr: 'adj',
    tr: ['ane', 'yay', 'ain', 'yin', 'wan', 'een', 'ann'],
    hl: ['ae', 'yae', 'yay'],
}, {
    sc: 'aesome',
    en: [
        ['single', 'solitary']
    ],
    gr: 'adj'
}, {
    sc: 'aefauld',
    en: [
        ['single'],
        ['simple', 'sincere', 'honest', 'faithful', 'single-minded']
    ],
    tr: 'single-minded',
    gr: 'adj'
}, {
    sc: 'allevolie',
    en: [
        ['giddy', 'volatile']
    ],
    gr: ['adj'],
    or: [
        [G.notes.or.ms, 'alla-volie'],
        ['frae the ' + G.notes.or.f, 'à la volée']
    ]
}, { // B
    sc: 'baltic',
    def: 'o the weather, the temperatur: fell cauld',
    tr: ['chankin', 'cold', 'cauld'],
    hl: ['baltic', 'cold', 'cauld'],
    gr: ['adj', 'informal']
}, {
    sc: 'bluitert',
    pr: ['blootert', 'bleetert'],
    tr: ['bloutered', 'blootered', 'bloutert', 'blootert'],
    en: ['drunk', 'having been hit or kicked hard'],
    gr: ['adj', 'informal']
}, {
    sc: 'braw',
    en: [
        ['fine', 'splendid', 'excellent', 'worthy'],
        ['elegant', 'well-dressed', 'showy'],
        ['handsome', 'beautiful', 'strong', 'able-bodied'],
        'considerable (of a sum of money)',
        'pleasant (of the weather)'
    ],
    tr: ['well dressed', 'able bodied', 'considerable', 'pleasant', 'bra', 'braa', 'brow'],
    gr: ['adj'],
    ex: G.ex.g,
    or: [
        [G.notes.or.as, 'braw, bra, brawf'],
        ['variant o the ' + G.notes.or.mf, 'brave']
    ]
}, {
    sc: 'brawlike',
    en: [
        ['fine', 'splendid', 'nice']
    ],
    tr: ['braw like', 'braw-like'],
    gr: ['adj']
}, {
    sc: 'byous',
    en: [
        ['wonderful', 'extraordinary', 'exceptional']
    ],
    gr: 'adj'
}, { // C
    sc: 'cantie',
    en: [
        ['lively', 'cheerful', 'pleasant'],
        ['small and neat'],
        ['comfortable']
    ],
    tr: 'canty',
    gr: 'adj',
    ex: 'They haed a cantie efternuin in the beer gairden'
}, {
    sc: 'chankin',
    def: 'o the weather, the temperatur: (fell) cauld',
    tr: ['chanking', 'baltic', 'cold', 'cauld'],
    hl: ['chankin', 'cold', 'cauld'],
    gr: ['adj', 'informal']
}, {
    sc: 'cauld',
    en: 'cold',
    tr: ['chanking', 'chankin', 'baltic', 'cold', 'cauld'],
    hl: 'cauld',
    gr: ['adj']
}, {
    sc: 'contrair',
    en: [
        ['contrary', 'opposite', 'unfavourable', 'adverse']
    ],
    gr: 'adj',
    or: 'see n'
}, { // D
    sc: 'defeat',
    tr: ['defait', 'defeet'],
    en: [
        ['defeated'],
        ['exhausted', 'worn out']
    ],
    gr: 'adj',
    or: 'see v'
}, {
    sc: 'deleerit',
    en: [
        ['delirious', 'mad', 'temporarily out of one\'s senses']
    ],
    gr: 'adj',
    or: [
        [G.notes.or.emods2, 'deleeret, deleerit, delireet'],
        [G.notes.or.mf, 'delirer'],
        [G.notes.or.l, 'dēlīrāre']
    ]
}, {
    sc: 'doutsome',
    en: [
        ['doubtful', 'undecided', 'ambiguous', 'uncertain']
    ],
    gr: ['adj']
}, {
    sc: 'easter',
    en: ['eastern', 'the more easterly of two places'],
    tr: ['wester', 'wastern', 'western'],
    hl: 'easter',
    gr: ['adj'],
    def: 'locatit tae the east; the mair easter o twa steids, biggins or ither things; kythes in steid names, e.g. Easter Road'
}, { // F
    sc: 'fantoush',
    en: [
        ['overdressed', 'flashy', 'fancy', 'ultra fashionable']
    ],
    gr: 'adj',
    or: [
        [G.notes.or.mode, 'fanty-sheeny'],
        [G.notes.or.it, 'fantoccino']
    ]
}, {
    sc: 'fashious',
    en: [
        ['troublesome', 'annoying', 'difficult'],
        ['fractious', 'peevish']
    ],
    gr: 'adj'
}, {
    sc: 'feart',
    en: [
        ['afraid', 'anxious']
    ],
    gr: 'adj',
    ex: G.ex.a
}, {
    sc: 'forby',
    sc_alt: 'forbye',
    pr: 'forBye',
    en: [
        ['extraordinary', 'strange', 'unusually good'],
    ],
    gr: ['adj']
}, {
    sc: 'forementioned',
    en: 'aforementioned',
    gr: ['adj'],
    or: ['?' + G.notes.or.me + '; ?by analogy wi <em>foresaid</em>; kythes in ' + G.notes.or.lms + ' an ' + G.notes.or.emods]
}, {
    sc: 'foresaid',
    en: 'aforesaid',
    gr: ['adj'],
    tr: 'mention',
    hl: 'foresaid',
    or: [
        [G.notes.or.as, 'for(e)said, foirsaid'],
        [G.notes.or.me, 'forsayde, forsaid']
    ]
}, { // F
    sc: 'furrin',
    en: [
        ['foreign', 'abroad']
    ],
    gr: ['adj'],
    tr: ['forrin', 'forain'],
    or: [
        [G.notes.or.as + ' haes ', 'forain(e), forayne, forane'],
        [G.notes.or.me, 'forain(e), forayn(e), forein(e), foreyne'],
        [G.notes.or.af, 'forain']
    ]
}, {
    sc: 'gey',
    pr: 'guyee',
    en: [
        ['excellent', 'splendid'],
        ['considerable', 'good-sized', 'great'],
        ['disreputable', 'wild']
    ],
    tr: ['guy', 'giy'],
    gr: ['adj'],
    or: 'see adv'
}, {
    sc: 'guid',
    en: 'good',
    tr: G.adj.guid.trigs,
    pr: G.adj.guid.pr,
    gr: 'adj'
}, { // I
    sc: 'ilk',
    en: 'same',
    gr: ['adj']
}, {
    sc: 'ilka',
    en: [
        ['each', 'every']
    ],
    gr: ['adj']
}, { // J
    sc: 'juist',
    en: [
        ['equitable', 'fair', 'lawful', 'justified'],
        ['exact', 'precise', 'correct', 'accurate']
    ],
    tr: ['just', 'jist'],
    gr: ['adj'],
    or: [
        [G.notes.or.me, 'just']
    ]
}, {
    sc: 'depute',
    gr: ['adj'],
    tr: 'deputy',
    hl: 'depute',
    def: 'apointit as, or exercein the duties o, depute',
    ex: ['The preses depute gied a gey dreich screed at the annual collogue', G.ex.f],
    or: [
        [G.notes.or.as, 'depute, deput'],
        [G.notes.or.me, 'depute'],
        [G.notes.or.af, 'deputé']
    ]
}, {
    sc: 'acquent',
    en: [
        ['acquainted', 'known', 'familiar with']
    ],
    pr: ['akWant', 'akWent'],
    tr: ['acquant', 'acquaint', 'aquent', 'aquaint', 'kent'],
    hl: ['acquant', 'acquaint', 'aquent', 'aquaint'],
    gr: 'adj',
    or: [
        [G.notes.or.as, 'acquent, acquant, aquynt'],
        [G.notes.or.me, 'aquointe'],
        [G.notes.or.mf, 'accointe']
    ],
    ex: [
        'I’m no yet fully acquent wi the policy'
    ]
}, { // O
    sc: 'ocht',
    en: 'any',
    gr: ['adj']
}, {
    sc: ['ongaun', 'ongaein'],
    en: [
        ['ongoing', 'continuing']
    ],
    gr: ['adj']
}, {
    sc: 'ony',
    en: 'any',
    tr: 'onie',
    gr: ['adj'],
    or: [
        [G.notes.or.as, 'ony'],
        [G.notes.or.ae, 'ǽniᵹ']
    ]
}, { // P
    sc: 'pertinent',
    en: [
        ['belonging or relevant to', 'appropriate']
    ],
    tr: ['belonging to', 'relevant to', 'relevant', 'pertain'],
    hl: ['belonging to', 'relevant to', 'relevant', 'pertinent'],
    gr: ['adj'],
    or: [
        [G.notes.or.as, 'pertinent'],
        [G.notes.or.me, 'pertinent'],
        [G.notes.or.l, 'pertinentia']
    ]
}, { // R
    sc: 'ragglish',
    en: [
        ['erratic'],
        ['wild', 'unreliable', 'undisciplined'],
        ['uneven', 'straggling', 'higgledy-piggledy'],
        ['<span>of weather</span> boisterous, uncertain, gusty with rain']
    ],
    tr: ['boisterous', 'uncertain'],
    gr: ['adj']
}, { // S
    sc: 'shuir',
    pr: ['shair', 'shör', 'shür', 'sheer', 'seer'],
    en: [
        ['efficacious', 'effective'],
        ['safe', 'secure', 'strong', 'reliable'],
        ['accurate', 'true', 'assured', 'convinced']
    ],
    tr: 'sure',
    gr: 'adj',
    or: [
        [G.notes.or.as, 'sure, suir(e), seur(e), s(c)hur(e)'],
        [G.notes.or.an, 'sur']
    ],
    ex: 'He wis shuir he’d seen the fellae somewhaur afore'
}, {
    sc: 'shuirly',
    en: [
        ['securely', 'safely'],
        ['with assurance, certainty or conviction', 'undoubtedly']
    ],
    tr: ['with certainty', 'with conviction', 'shairly', 'sheerly', 'seerly', 'surely'],
    gr: 'adv',
    or: 'see adj'
}, {
    sc: 'sweir',
    pr: 'sweer',
    en: [
        ['lazy', 'slothful', 'indolent'],
        ['unwilling', 'reluctant', 'loath'],
    ],
    gr: 'adj',
    or: [
        [G.notes.or.as, 'swer(e), sweir(e), sweer'],
        [G.notes.or.ae, 'swǽr']
    ]
}, {
    sc: 'sweirt',
    en: [
        ['sluggish', 'loath', 'reluctant']
    ],
    gr: 'adj',
    or: 'see adj <span>sweir</span>'
}, { // T
    sc: 'tuim',
    pr: ['toom', 'teem', 'taim', 'tim'],
    en: [
        ['empty', 'vacant'],
        'hungry', ['<span>(of a place)</span> unoccupied'],
        ['<span>(of people)</span> thin', 'lean', 'lank'],
        ['<span>(of a machine)</span> idling', 'not processing material']
    ],
    tr: ['lanky', 'thin', 'lean', 'unoccupied', 'idling', 'idle'],
    gr: 'adj',
    or: [
        [G.notes.or.as, 'tome, tume'],
        [G.notes.or.ae, 'tōm'],
        [G.notes.or.anor, 'tómr']
    ],
    ex: ['The man wis tuim-heidit!', 'I cam back tuim-haundit']
}, { // V
    sc: 'versant',
    en: [
        ['conversant with', 'versed in'], 'fluent'
    ],
    tr: ['conversant', 'versed', 'familiar with'],
    gr: 'adj',
    or: [
        [G.notes.or.lms, 'versant'],
        [G.notes.or.eme, 'versant']
    ],
    ex: ['Nicola wis versant in baith Italians an French', 'He wis weel versant in Scots medieval history']
}, {
    sc: ['waster', 'wester'],
    en: ['western', 'the more westerly of two places'],
    tr: ['easter', 'eastern'],
    hl: 'wester',
    gr: ['adj'],
    def: 'locatit tae the wast; the mair waster o twa steids, biggins or ither things; aft-times in steid names, e.g. Wester Hailes'
});
/**
 * Adverbs
 */

G.adv = {}; // More complex adverbs

/**
 * Add adverbs to dictionary object
 */

G.dict.push({ // A
    sc: 'ablo',
    pr: 'abLo',
    sc_alt: 'ablow',
    en: 'below',
    gr: ['prep', 'adv']
}, {
    sc: 'about',
    sc_alt: 'aboot',
    pr: 'aboot',
    en: 'about',
    tr: 'anenst',
    hl: 'about',
    gr: ['prep', 'adv']
}, {
    sc: 'abuin',
    pr: ['abön', 'abün', 'abin', 'abain', 'abeen'],
    en: 'above',
    gr: ['adv', 'prep']
}, {
    sc: 'aft',
    en: [
        ['often', 'oft']
    ],
    gr: ['adv'],
    or: [
        [G.notes.or.ae, 'oft']
    ]
}, {
    sc: 'aft-times',
    tr: 'afttimes',
    en: [
        ['often', 'frequently']
    ],
    gr: ['adv']
}, {
    sc: 'allevolie',
    en: ['at random'],
    gr: ['adv'],
    or: 'see the adj'
}, { // B
    sc: 'braw',
    en: [
        ['well', 'finely'],
        ['very', 'extremely']
    ],
    tr: ['bra', 'braa', 'brow'],
    gr: ['adv'],
    or: 'see the adj'
}, {
    sc: ['braw an', 'braw and'],
    en: [
        ['very', 'extremely']
    ],
    gr: ['adv'],
    ex: ['I\'m braw an weel, thanks', 'Hae yersels a braw an cantie Christmas']
}, {
    sc: 'byous',
    en: [
        ['exceedingly', 'very']
    ],
    gr: 'adv'
}, { // C
    sc: 'contrair',
    en: [
        ['in a contrary way']
    ],
    tr: 'contrarily',
    gr: 'adv',
    or: 'see n'
}, {
    sc: 'forby',
    sc_alt: 'forbye',
    pr: 'forBye',
    en: [
        ['beyond', 'past'],
        ['besides', 'in addition', 'as well']
    ],
    tr: 'also',
    gr: ['adv']
}, {
    sc: 'gey',
    pr: 'guyee',
    en: [
        ['considerably', 'very', 'rather'],
    ],
    tr: ['guy', 'giy'],
    gr: ['adv'],
    or: [
        [G.notes.or.as, 'gay(e), gey'],
        [G.notes.or.f, 'gai']
    ]
}, {
    sc: ['gey an', 'gey and'],
    en: [
        ['rather', 'very'],
    ],
    gr: 'adv',
    ex: [G.ex.g, 'The band’s new album wis gey an listenable']
}, {
    sc: 'hinderly',
    en: 'eventually',
    gr: ['adv']
}, { // J
    sc: 'juist',
    pr: ['jöst', 'jüst', 'düst', 'joost', 'doost', 'jist', 'dist', 'jeest'],
    en: [
        ['exactly', 'accurately', 'correctly', 'directly'],
        ['at this time', 'just now', 'precisely'],
        ['only', 'merely', 'barely']
    ],
    tr: 'just',
    gr: ['adv'],
    or: 'see adj'
}, {
    sc: 'guid',
    en: [
        ['good', 'very', 'pretty']
    ],
    tr: G.adj.guid.trigs,
    pr: G.adj.guid.pr,
    gr: 'adv'
}, {
    sc: 'atweel',
    en: [
        ['assuredly', 'certainly', 'indeed']
    ],
    gr: 'adv'
}, {
    sc: 'atour',
    en: [
        ['besides', 'over and above', 'moreover', 'in addition']
    ],
    tr: 'attour',
    gr: ['adv', 'prep']
}, {
    sc: ['certie', 'certes'],
    pr: ['certie', 'certis'],
    en: [
        ['certainly', 'assuredly']
    ],
    gr: ['adv'],
    or: [
        [G.notes.or.as, 'certis'],
        [G.notes.or.me, 'certes']
    ]
}, { // O
    sc: 'ony',
    en: [
        ['in any degree', 'to any extent'],
        ['in any way', 'at all']
    ],
    gr: ['adv'],
    or: 'see adj'
}, {
    sc: 'onyplace',
    en: 'anywhere',
    gr: ['adv']
}, {
    sc: 'onywhaur',
    en: 'anywhere',
    gr: ['adv']
}, {
    sc: 'onywey',
    en: [
        ['anyhow', 'in any way']
    ],
    tr: 'anyway',
    gr: ['adv']
}, {
    sc: 'onyweys',
    en: [
        ['anyhow', 'in any way', 'anywhere']
    ],
    tr: 'anyway',
    gr: ['adv']
}, {
    sc: 'ocht',
    en: [
        ['somewhat', 'rather', 'in some way', 'to some degree']
    ],
    gr: ['adv']
}, { // S
    sc: 'shuir',
    en: [
        ['surely', 'indeed', 'for certain']
    ],
    gr: ['adv'],
    tr: ['shair', 'shör', 'shür', 'sheer', 'seer', 'sure'],
    or: 'see adj'
}, {
    sc: 'aefauldly',
    en: [
        ['sincerely', 'honestly', 'faithfully']
    ],
    gr: 'adv'
}, {
    sc: 'than',
    pr: ['than', 'thaun', 'thin', 'dan'],
    en: 'then',
    gr: ['adv', 'n']
}, {
    sc: 'sicweys',
    en: 'thus',
    gr: ['adv']
}, {
    sc: ['whan', 'fan'],
    pr: ['whan', 'whaun', 'whin', 'fan', 'fin', 'aan'],
    en: 'when',
    gr: ['adv', 'conj']
}, {
    sc: ['whiles', 'fyles'],
    pr: ['whilez', 'filez'],
    en: [
        ['sometimes', 'at times', 'occasionally']
    ],
    gr: ['adv']
});
/**
 * Nouns
 */

G.n = {}; // More complex nouns

/**
 * Add nouns to dictionary object
 */

G.dict.push({
    sc: 'annualrent',
    def: ['rent peyed ilka year', 'interest on borraed siller'],
    tr: ['interest', 'annual rent'],
    gr: 'n',
    or: [
        [G.notes.or.as, 'annualrent, annual rent']
    ]
}, {
    sc: 'associe',
    pr: 'aSosee',
    en: 'association',
    gr: 'n',
    or: [
        ['?' + G.notes.or.f, 'associé']
    ]
}, { // C
    sc: 'certificate',
    en: 'certificate',
    gr: 'n',
    or: [
        [G.notes.or.ms, 'certificat'],
        [G.notes.or.mf, 'certificat']
    ],
}, {
    sc: 'claes',
    en: 'clothes',
    gr: 'n'
}, {
    sc: 'collectorie',
    def: 'the office o (tax) collector',
    tr: 'tax collector',
    gr: ['n', 'obsolete'],
    or: [
        ['Ablins ' + G.notes.or.af, 'collecterie']
    ]
}, {
    sc: 'complouther',
    pr: 'comploother',
    en: [
        ['a mix up', 'confusion'], 'a mixture', 'a conversation'
    ],
    tr: ['mix up', 'mix-up', 'mixture', 'conversation', 'compluter', 'compluther'],
    gr: 'n',
    or: ['wankent, but mak compare wi ' + G.notes.or.af + ' <span>complote</span>, ‘a raivelt thrang o fowk’']
}, {
    sc: 'componer',
    en: 'composer',
    gr: 'n',
    or: 'see the v <span>tae compone</span>'
}, {
    sc: 'composition',
    en: [
        ['<span>law</span> a sum paid in settlement of a claim, dispute or obligation; the amount fixed by mutual agreement'],
        ['a piece of writing; a work of literature, music or art'],
        ['a combination of elements', 'a mixture']
    ],
    tr: 'settlement',
    gr: 'n',
    or: [
        [G.notes.or.as, 'compositioun, composicioun'],
        [G.notes.or.me, 'composicioun'],
        [G.notes.or.l, 'compositio']
    ]
}, {
    sc: 'contrair',
    en: [
        ['the contrary', 'the opposite']
    ],
    tr: ['contrary', 'opposite', 'on the contrary', 'to the contrary'],
    hl: ['contrary', 'opposite'],
    gr: 'n',
    or: [
        [G.notes.or.as, 'contrar, contrair'],
        ['frae the ' + G.notes.or.af, 'contraire']
    ]
}, { // D
    sc: 'dask',
    en: [
        ['desk', 'seat', 'church pew']
    ],
    gr: 'n',
    or: [
        [G.notes.or.as + ' (frae 1530)', 'dask, daske'],
        ['possible influence o ' + G.notes.or.as + ' <em>dais, das</em>, frae the ' + G.notes.or.nfd, 'dais']
    ]
}, {
    sc: 'debursement',
    en: 'disbursement',
    gr: 'n',
    or: 'see v <span>deburse</span>'
}, {
    sc: 'defeat',
    en: 'defeat',
    tr: ['defait', 'defeet'],
    gr: 'n',
    or: 'see v'
}, {
    sc: 'defect',
    pr: ['deefekt', 'deefek'],
    en: [
        ['shortcoming', 'imperfection', 'flaw']
    ],
    gr: 'n',
    or: [
        [G.notes.or.as, 'defect'],
        [G.notes.or.l, 'dēfectus']
    ]
}, {
    sc: 'defection',
    en: [
        ['desertion', 'failure in duty'],
        ['defect', 'flaw', 'failure']
    ],
    gr: 'n',
    or: [
        [G.notes.or.as, 'defection'],
        [G.notes.or.l, 'dēfectio']
    ]
}, {
    sc: 'depute',
    en: 'a deputy',
    gr: 'n',
    tr: 'deputy',
    ex: ['The Green Pairty convener wis ettlin tae appynt a depute by the end o the simmer'],
    or: 'see adj'
}, {
    sc: 'desuetude',
    en: [
        ['disuse', 'discontinuance']
    ],
    gr: 'n law',
    or: [
        [G.notes.or.f, 'désuétude'],
        [G.notes.or.l, 'dēsuētūdo']
    ],
    ex: 'It wis an auld law that haed fawen intae desuetude'
}, { // E
    sc: 'eneuch',
    pr: ['inyuch', 'inyooch', 'unyooch', 'unooch', 'unyoch'],
    tr: 'sufficient',
    hl: 'eneuch',
    en: 'enough',
    gr: ['n', 'adj', 'adv'],
    ex: 'I’ve haed juist about eneuch o your haiverin'
}, {
    sc: 'environs',
    en: [
        ['the environment', 'surrounds']
    ],
    tr: 'environment',
    gr: 'n',
    or: [
        '?uissage as n frae Modren English',
        G.notes.or.as + ' haes the v <em>enveron, inviroun, inveroun</em> <em>(to encircle, surround)</em>', ['frae the ' + G.notes.or.me, 'envirounen'],
        [G.notes.or.af, 'environner']
    ]
}, {
    sc: 'ettle',
    en: [
        ['one\'s aim or purpose', 'one\'s design or object'],
        ['an effort', 'an attempt'],
        ['an ambition', 'a desire']
    ],
    tr: ['objective', 'effort', 'attempt', 'aim', 'purpose', 'design', 'object', 'ambition', 'desire', 'ettlin'],
    hl: ['objective', 'effort', 'attempt', 'aim', 'purpose', 'design', 'object', 'ambition', 'desire'],
    gr: 'n',
    or: 'see v'
}, {
    sc: 'ettlin',
    en: [
        ['purpose', 'intention', 'effort', 'endeavour', 'eagerness', 'ambition']
    ],
    tr: 'ettle',
    hl: 'ettlin',
    gr: 'n'
}, { // F
    sc: 'fankle',
    en: [
        ['tangle', 'muddle']
    ],
    gr: 'n',
    or: [
        [G.notes.or.as, 'fang'],
        [G.notes.or.anor, 'fang']
    ]
}, {
    sc: 'fash',
    en: [
        ['trouble', 'bother', 'annoyance'], 'a troublesome person'
    ],
    gr: 'n',
    or: 'see v',
    ex: 'Whit wi aw the snaw, gettin tae wark wis a muckle fash'
}, {
    sc: 'fasherie',
    en: [
        ['trouble', 'annoyance', 'fuss']
    ],
    gr: 'n',
    or: [
        [G.notes.or.ms, 'fasch(e)rie, fash(e)rie'],
        [G.notes.or.mf, 'fascherie']
    ],
    ex: 'There wis a bit fasherie winnin at the fitba stadium in time for kick-aff'
}, {
    sc: 'feartie',
    en: 'coward',
    gr: 'n'
}, {
    sc: 'fowk',
    pr: ['fuowk', 'foak'],
    en: 'people',
    gr: 'n',
    or: [
        [G.notes.or.ae, 'folc']
    ]
}, { // G
    sc: 'gloriosity',
    en: 'self-importance',
    tr: ['boast', 'gloriositie', 'self importance'],
    hl: ['gloriosity', 'gloriositie', 'self importance'],
    gr: 'n',
    or: [
        [G.notes.or.ms, 'gloriositie'],
        [G.notes.or.mf, 'glorieuseté']
    ]
}, { // H
    sc: 'hauden gaun',
    en: 'continuation',
    gr: 'n'
}, {
    sc: 'house',
    sc_alt: ['hoose'],
    pr: 'hoose',
    en: 'house',
    tr: ['houss', 'hooss'],
    gr: 'n'
}, {
    sc: 'maet',
    sc_alt: 'meat',
    en: [
        ['food', 'sustenance'],
        'a meal',
        'meat'
    ],
    tr: ['meal', 'mait'],
    gr: 'n',
    or: [
        [G.notes.or.as, 'mete, meit, met, mait, meat'],
        [G.notes.or.ae, 'mete']
    ]
}, { // I
    sc: 'ilk',
    en: [
        ['a family', 'a race', 'a kind', 'a type']
    ],
    tr: ['family', 'race', 'kind', 'type'],
    gr: 'n'
}, {
    sc: ['ilkane', 'ilk ane'],
    en: [
        ['each one', 'everyone']
    ],
    gr: ['pron']
}, {
    sc: 'accress',
    en: 'increase',
    gr: 'n',
    or: 'see v'
}, {
    sc: 'knawledge',
    en: 'knowledge',
    gr: 'n'
}, { // L
    sc: 'lad',
    en: [
        ['a boy', 'young man'],
        ['a male servant', 'groom'],
        'a son',
        'a male sweetheart'
    ],
    tr: ['son', 'male sweetheart', 'boy', 'young man', 'laddie', 'loun'],
    hl: ['son', 'male sweetheart', 'boy', 'young man'],
    gr: 'n',
    or: [
        [G.notes.or.as, 'lad']
    ]
}, {
    sc: 'laddie',
    en: ['a young man', 'a male child', 'a male sweetheart', 'a son'],
    tr: ['young man', 'male child', 'male sweetheart', 'son', 'boy', 'loun', 'lad'],
    hl: ['young man', 'male child', 'male sweetheart', 'son', 'boy'],
    gr: 'n',
    or: [
        [G.notes.or.as, 'laddie']
    ]
}, {
    sc: 'loun',
    pr: 'loon',
    en: [
        ['a young man', 'boy', 'youth'],
        ['a young farm worker'],
        ['a male child', 'son', 'baby boy']
    ],
    tr: ['young man', 'farm-boy', 'farm boy', 'lad', 'laddie'],
    hl: ['young man', 'farm-boy', 'farm boy'],
    gr: 'n',
    or: [
        [G.notes.or.as, 'loun']
    ]
}, { // M
    sc: 'maun',
    pr: 'maun',
    en: [
        ['compulsion', 'necessity']
    ],
    gr: 'n',
    or: 'see v'
}, {
    sc: 'mind',
    def: 'the mind; that whilk is brocht back tae mind or mindit, memory, a mindin',
    gr: 'n',
    or: 'see v'
}, {
    sc: 'mindin',
    en: [
        ['a memory', 'a recollection']
    ],
    tr: ['memory', 'recollection'],
    gr: 'n'
}, { // N
    sc: 'nationalist',
    def: 'a body that’s for Scotland’s polítical independence',
    gr: ['n'],
}, {
    sc: 'naturality',
    en: [
        ['innate ability or intelligence', 'talent']
    ],
    gr: 'n',
    or: [
        [G.notes.or.as, 'naturalité, naturalty'],
        [G.notes.or.f, 'naturalité'],
        [G.notes.or.l, 'nātūrālitas']
    ]
}, {
    sc: 'nat',
    def: 'ocht derogatory term for a Scots nationalist',
    gr: ['n', 'informal']
}, { // O
    sc: 'onybody',
    en: 'anybody',
    tr: ['oniebody', 'emdie', 'emdy'],
    gr: 'n'
}, {
    sc: 'origin',
    en: 'origin',
    gr: 'n'
}, {
    sc: 'ocht',
    en: [
        ['aught', 'anything'], 'nothing'
    ],
    gr: 'n',
    ex: ['Jamie didna hae the time tae mak ocht for the bake sale', 'John haed ocht ava tae dae wi the maist recent failt IT project']
}, {
    sc: 'pneumonie',
    en: 'pneumonia',
    gr: 'n',
    or: [
        [G.notes.or.as, 'peripneumonie'],
        [G.notes.or.eme, 'peripneumony'],
        [G.notes.or.f, 'péripneumonie']
    ],
    ex: 'She wis awfu unweel wi the pneumonie'
}, { // Q
    sc: ['quine', 'quinie'],
    sc_alt: 'quean',
    pr: ['kwine', 'kwinie'],
    en: [
        ['a young (unmarried) woman', 'a wench', 'a girl'],
        ['a female child', 'a schoolgirl'],
        'a female sweetheart',
        'a daughter'
    ],
    tr: ['young woman', 'wench', 'girl', 'schoolgirl', 'sweetheart', 'daughter', 'lass', 'lassie', 'dochter'],
    gr: 'n',
    or: [
        [G.notes.or.as, 'quene, quein'],
        [G.notes.or.ae, 'cwēn, cwene']
    ]
}, {
    sc: 'uiss',
    pr: ['yös', 'yis', 'ees', 'yoos'],
    tr: ['yiss', 'uise', 'yaise', 'yaize'],
    hl: ['uiss', 'yiss', 'ees'],
    en: 'use',
    gr: 'n'
}, { // R
    sc: 'rhetoric',
    pr: 'rEtorik',
    en: 'rhetoric',
    gr: 'n',
    or: [
        [G.notes.or.as, 'rethorik, rethorie, rethoreis'],
        [G.notes.or.af, 'rhétorique'],
        [G.notes.or.l, 'rhētorica'],
        'frae the Greek <span>rhētorikē</span>'
    ],
    ex: 'It wis naething but tuim rhetoric'
}, {
    sc: 'roaster',
    def: 'a body that haivers, fashes fowk wi their ill laits, or is thocht tae be makkin an ídiot o thaimsels',
    gr: ['n', 'informal', 'derogatory']
}, { // S
    sc: 'signatur',
    en: 'signature',
    gr: 'n'
}, {
    sc: 'springheid',
    pr: 'springheed',
    en: [
        ['source', 'origin']
    ],
    gr: 'n'
}, {
    sc: 'swither',
    en: [
        ['a state of indecision or doubt', 'hesitation', 'uncertainty'],
        ['a state of nervousness or agitation', 'panic', 'fluster'],
        ['a state of confusion', 'a tangled or muddled condition'],
        ['a dithering, undecided person']
    ],
    tr: ['indecision', 'doubt', 'nervousness', 'agitation', 'confusion', 'tangle', 'muddle', 'ditter', 'doiter'],
    hl: ['indecision', 'doubt', 'nervousness', 'agitation', 'confusion', 'tangle', 'muddle'],
    gr: 'n',
    ex: 'Will wis in a swither about whit Hogmanay pairty tae gang tae',
    or: 'see v'
}, { // T
    sc: 'toun',
    pr: 'toon',
    en: 'town',
    gr: 'n',
    or: [
        [G.notes.or.as, 'toun, town(e), ton(e)'],
        [G.notes.or.ae, 'tūn']
    ]
}, {
    sc: 'tred',
    en: 'trade',
    gr: 'n',
    ex: 'He\'s a jyner tae tred'
}, { // W
    sc: 'wabsteid',
    en: 'website',
    pr: 'wabsteed',
    tr: ['websteid', 'websteed', 'wabsite'],
    gr: 'n',
}, {
    sc: 'unionist',
    def: 'a body that’s for the hauden gaun o the polítical union atween Scotland an England',
    gr: ['n']
}, {
    sc: 'yoon',
    def: 'a derogatory term for unionist',
    gr: ['n', 'informal', 'derogatory']
}, {
    sc: 'zoomer',
    def: 'a body that’s ragglish or allevolie',
    gr: ['n', 'informal', 'derogatory']
});
/**
 * Geographical
 */

G.dict.push({
    sc: 'Catalonie',
    en: 'Catalonia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Africae',
    en: 'Africa',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'African',
    en: 'African',
    gr: 'adj'
}, {
    sc: 'Albainie',
    en: 'Albania',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Albainian',
    en: 'Albanian',
    gr: 'adj',
    def: 'anent Albainie, its fowk, or their leid'
}, {
    sc: 'Americae',
    en: 'America',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'American',
    en: 'American'
}, {
    sc: 'Andorrie',
    en: 'Andorra',
    gr: ['pn', 'adj'],
    or: G.notes.b
}, {
    sc: 'Armeinie',
    en: 'Armenia',
    gr: ['pn', 'adj'],
    or: G.notes.b
}, {
    sc: 'Austrailie',
    en: 'Australia',
    gr: ['pn', 'adj'],
    or: G.notes.b
}, {
    sc: 'Austrich',
    en: 'Austria',
    gr: ['pn', 'adj'],
}, {
    sc: 'Baliaries',
    en: 'Balearics',
    gr: ['pn', 'adj'],
}, {
    sc: 'Belgium',
    en: 'Belgium',
    gr: 'pn'
}, {
    sc: 'Bertanie',
    en: 'Brittany',
    gr: ['pn', 'adj']
}, {
    sc: 'Bey o Bescay',
    en: 'Bay of Biscay',
    gr: 'pn'
}, {
    sc: 'Beyellaroushie',
    en: 'Bellarussia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Beyellaroushian',
    en: 'Bellarussian',
    gr: 'adj'
}, {
    sc: 'Bosnie',
    en: 'Bosnia',
    gr: ['pn', 'adj'],
    or: G.notes.b
}, {
    sc: 'Bulgairie',
    pr: 'bulGairae',
    en: 'Bulgaria',
    tr: ['Bulgars', 'Bulgarie'],
    hl: ['Bulgairie', 'Bulgarie'],
    or: G.notes.b,
    gr: 'pn'
}, {
    sc: 'Bulgars',
    en: 'Bulgarian',
    tr: ['Bulgairie', 'Bulgarie'],
    hl: 'Bulgars',
    gr: 'adj',
    def: 'anent Bulgairie, its fowk, or their leid'
}, {
    sc: 'Californie',
    en: 'California',
    gr: 'pn',
    def: 'a state in wastren USA',
    or: [G.notes.a, '<em>Californie</em> is the French mak forby']
}, {
    sc: 'Canadae',
    en: 'Canada',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'China',
    en: 'China',
    gr: 'pn',
}, {
    sc: 'Corsicae',
    en: 'Corsica',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Croaitie',
    en: 'Croatia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: ['Czechland', 'Czechie'],
    en: ['Czech Republic, Czechia'],
    gr: 'pn',
    or: '‘Czechie’ is uised on the Scots Wikipedia, an is maistlikes a modren protologism o Česko, a new offícial name for Česká republika; ' + G.notes.b
}, {
    sc: 'Denmark',
    def: 'kintra in Scandinaivie',
    gr: 'pn'
}, {
    sc: 'Dens',
    def: ['the Scandinaivie leid spoken in Denmark an in pairts o Greenland an the Faerae Isles', ['a body that bides in, or is frae, Denmark', 'someane o Dens strynd']],
    // def: [
    //     ['a body that bides in, or is frae, Denmark', 'someane o Dens strynd']
    // ],
    tr: ['dane', 'danish'],
    gr: ['n'],
    or: 'see adj'
}, {
    sc: 'Dens',
    def: 'anent Denmark, its fowk, or their leid',
    tr: 'danish',
    gr: ['adj'],
    or: [
        [G.notes.or.ae, 'denisc']
    ]
}, {
    sc: 'Easter Seas',
    en: 'Baltic Sea',
    gr: 'pn'
}, {
    sc: 'Edinburgh',
    en: 'Edinburgh',
    def: 'the caipital cíty o Scotland',
    gr: 'pn'
}, {
    sc: 'Eistland',
    en: 'Estonia',
    gr: 'pn'
}, {
    sc: 'England',
    def: 'a kintra in southren Great Brítain that is pairt o the Unitit Kinrick',
    gr: 'pn'
}, {
    sc: 'Europe',
    en: 'Europe',
    gr: 'pn'
}, {
    sc: 'Faerae Isles',
    en: 'Faroe Isles',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Finland',
    gr: 'pn',
    en: 'Finland'
}, {
    sc: 'Flaunders',
    gr: 'pn',
    en: 'Flanders'
}, {
    sc: 'Fraunce',
    gr: 'pn',
    en: 'France'
}, {
    sc: 'Freishland',
    en: 'Frisia',
    gr: 'pn',
}, {
    sc: 'Frisie',
    en: 'Frisian',
    def: 'anent Freishland, its fowk, or their leid',
    gr: 'adj'
}, {
    sc: 'Galeisie',
    en: 'Galicia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Georgie',
    en: 'Georgia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Germany',
    en: 'Germany',
    gr: 'pn'
}, {
    sc: 'Girth o the North Pole',
    en: 'Arctic Circle',
    gr: 'pn'
}, {
    sc: 'Greece',
    en: 'Greece',
    gr: 'pn'
}, {
    sc: 'Iceland',
    en: 'Iceland',
    gr: 'pn'
}, {
    sc: 'Indie',
    en: 'India',
    gr: 'pn'
}, {
    sc: 'Ireland',
    def: ['a kintra comprehendin about fower fifts o the island o Ireland; forby kent as the Republic o Ireland', 'an island in the North Atlantic, tae the wast o Great Brítain'],
    tr: ['Republic o Ireland', 'Republic of Ireland'],
    gr: 'pn'
}, {
    sc: 'Italy',
    en: 'Italy',
    gr: 'pn'
}, {
    sc: 'Jamaicae',
    en: 'Jamaica',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Japan',
    en: 'Japan',
    gr: 'pn'
}, {
    sc: 'Lappland',
    en: 'Lappland',
    gr: 'pn'
}, {
    sc: 'Leifland',
    en: 'Lithuania',
    gr: 'pn'
}, {
    sc: 'Lettland',
    en: 'Latvia',
    gr: 'pn'
}, {
    sc: 'Litchtenstein',
    en: 'Liechtenstein',
    gr: 'pn'
}, {
    sc: 'Lusinburg',
    en: 'Luxembourg',
    gr: 'pn'
}, {
    sc: 'Macedony',
    en: 'Macedonia',
    gr: 'pn'
}, {
    sc: 'Malaysie',
    en: 'Malaysia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Meditterane Sea',
    en: 'Mediterranean Sea',
    gr: 'pn'
}, {
    sc: 'Netherlands',
    en: 'Netherlands',
    gr: 'pn'
}, {
    sc: 'Neveron',
    en: 'Basque Country',
    gr: 'pn'
}, {
    sc: 'Norrowa',
    sc_alt: 'Norroway',
    en: 'Norway',
    def: 'kintra in Scandinaivie',
    gr: 'pn'
}, {
    sc: 'Norse Sea',
    en: 'Norwegian Sea',
    gr: 'pn'
}, {
    sc: 'North Pole',
    en: 'Arctic',
    gr: 'pn'
}, {
    sc: 'North Sea',
    en: 'North Sea',
    gr: 'pn'
}, {
    sc: 'Northren Ireland',
    def: 'yon bit o the Unitit Kinrick locatit in the north-east pairt o Ireland',
    tr: 'Northern Ireland',
    gr: 'pn'
}, {
    sc: 'Poland',
    en: 'Poland',
    gr: 'pn'

}, {
    sc: ['Portingal', 'Portugal'],
    en: 'Portugal',
    gr: 'pn'
}, {
    sc: 'Roumainie',
    en: 'Romania',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Roushie',
    en: 'Russia',
    gr: ['pn', 'adj'],
    or: G.notes.b
}, {
    sc: 'Sardinnie',
    en: 'Sardinia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Scandinaivie',
    en: 'Scandinavia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Scotland',
    gr: 'pn',
    def: 'a kintra in northren Great Brítain that is pairt o the Unitit Kinrick'
}, {
    sc: 'Serbie',
    en: 'Serbia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Sicillie',
    en: 'Sicilly',
    gr: 'pn'
}, {
    sc: 'Slovakie',
    en: 'Slovakia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Sloveinie',
    en: 'Slovenia',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'South Africae',
    pr: 'Sooth Africae',
    en: 'South Africa',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'South Americae',
    pr: 'Sooth Americae',
    en: 'South America',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'South Pole',
    pr: 'Sooth Pole',
    gr: 'pn',
    en: 'Antarctica'
}, {
    sc: 'Spainie',
    en: 'Spain',
    gr: 'pn',
    or: G.notes.b
}, {
    sc: 'Swaden',
    def: 'kintra in Scandinaivie',
    tr: 'sweden',
    gr: 'pn',
    or: [
        [G.notes.or.mlg + ', ' + G.notes.or.md, 'Sweden']
    ]
}, {
    sc: 'Swade',
    def: [
        ['a body that bides in, or is frae, Swaden', 'someane o Swades strynd'], 'a kind o neep'
    ],
    tr: 'swede',
    gr: ['n']
}, {
    sc: 'Swades',
    sc_alt: 'Swaidish',
    tr: 'swedish',
    def: 'anent Swaden, its fowk, or their leid',
    gr: ['adj']
}, {
    sc: 'Swades',
    sc_alt: 'Swaidish',
    tr: 'swedish',
    def: 'the Scandinaivie leid o Swaden, forby spoken in pairts o Finland',
    gr: ['n']
}, {
    sc: 'Swisserland',
    en: 'Switzerland',
    gr: 'pn'
}, {
    sc: 'Syrie',
    en: 'Syria',
    gr: 'pn',
    or: G.notes.a
}, {
    sc: ['The Muckle Dub', 'Atlantic Ocean'],
    en: 'Atlantic Ocean',
    gr: 'pn'
}, {
    sc: 'Turkey',
    en: 'Turkey',
    gr: 'pn'
}, {
    sc: 'Ungairy',
    pr: 'unGairae',
    en: 'Hungary',
    gr: 'pn'
}, {
    sc: 'Wales',
    def: 'a kintra in Great Brítain that is pairt o the Unitit Kinrick',
    gr: 'pn'
}, {
    sc: 'warld',
    en: 'world',
    gr: 'pn'
}, {
    sc: 'Wast Indies',
    en: 'West Indies',
    gr: 'pn'
}, {
    sc: 'Birran',
    en: 'Bergen',
    gr: 'pn',
    def: 'a seaport in south-wast Norawa'
}, {
    sc: 'Bourdeuse',
    en: 'Bordeaux',
    gr: 'pn',
    def: 'a port in south-wast Fraunce'
}, {
    sc: ['Bristow', 'Bristol'],
    en: 'Bristol',
    gr: 'pn',
    def: 'a cíty in south-wast England'
}, {
    sc: 'Bullen',
    en: 'Boulogne',
    gr: 'pn',
    def: 'a ferry port an toun in northren Fraunce'
}, {
    sc: 'Calice',
    en: 'Calais',
    gr: 'pn',
    def: 'a ferry port in northren Fraunce'
}, {
    sc: 'Camfeir',
    en: [
        ['Campveer', 'Veere']
    ],
    gr: 'pn',
    def: 'a cíty in the Netherlands'
}, {
    sc: 'Caunterberry',
    en: 'Canterbury',
    gr: 'pn',
    def: 'a cíty in south-east England'
}, {
    sc: 'Caurdiff',
    en: 'Cardiff',
    gr: 'pn',
    def: 'the caipital cíty o Wales'
}, {
    sc: 'Colpenhaven',
    en: 'Copenhagen',
    gr: 'pn',
    def: 'the caipital cíty o Denmark'
}, {
    sc: 'Cortrik',
    en: 'Courtrai',
    gr: 'pn',
    def: 'a cíty in Belgium'
}, {
    sc: 'Cullen',
    en: 'Cologne',
    gr: 'pn',
    def: 'a cíty in Germany'
}, {
    sc: ['Danskin', 'Gdańsk'],
    en: 'Gdańsk',
    gr: 'pn',
    def: 'a cíty in Poland'
}, {
    sc: ['Druntin', 'Trondheim'],
    en: 'Trondheim',
    gr: 'pn',
    def: 'a toun in Norawa'
}, {
    sc: 'Elsenure',
    en: [
        ['Helsignor, Elsinore']
    ],
    gr: 'pn',
    def: 'a cíty in eastlin Denmark'
}, {
    sc: ['Frankfuird', 'Frankfort', 'Frankfurt'],
    en: 'Frankfurt',
    gr: 'pn',
    def: 'a cíty in waster Germany'
}, {
    sc: 'Gottenberry',
    en: 'Gothenburg',
    gr: 'pn',
    def: 'a cíty in south-wast Swaden'
}, {
    sc: 'Grenidge',
    en: 'Greenwich',
    gr: 'pn',
    def: 'a burgh in south-east London'
}, {
    sc: 'Hambra',
    en: 'Hamburg',
    gr: 'pn',
    def: 'a cíty in northren Germany'
}, {
    sc: 'Handwarp',
    en: 'Antwerp',
    gr: 'pn',
    def: 'a cíty in northren Belgium'
}, {
    sc: 'Leisborn',
    en: 'Lisbon',
    def: 'the caipital cíty o Portingal'
}, {
    sc: 'Lovan',
    en: 'Leuven',
    gr: 'pn',
    def: 'a cíty in Belgium'
}, {
    sc: 'Luipkie',
    en: 'Lübeck',
    gr: 'pn',
    def: 'a cíty in northren Germany'
}, {
    sc: 'Luke',
    en: 'Liège',
    gr: 'pn',
    def: 'a stewartry o eastlin Belgium'
}, {
    sc: ['London', 'Lunnon'],
    en: 'London',
    gr: 'pn',
    def: 'the caipital cíty o England'
}, {
    sc: 'Maestricht',
    en: 'Maastricht',
    gr: 'pn',
    def: 'a cíty in the Netherlands'
}, {
    sc: 'Norridge',
    en: 'Norwich',
    gr: 'pn',
    def: 'a cíty in eastlin England'
}, {
    sc: 'Ozenbrig',
    en: 'Osnabrück',
    gr: 'pn',
    def: 'a cíty in north-wast Germany'
}, {
    sc: 'Pairis',
    en: 'Paris',
    gr: 'pn',
    def: 'the caipital cíty o Fraunce'
}, {
    sc: 'Poyters',
    en: 'Poitiers',
    gr: 'pn',
    def: 'a cíty in wast-central Fraunce'
}, {
    sc: 'Queensbrig',
    en: 'Kaliningrad',
    gr: 'pn'
}, {
    sc: 'The Rotchell',
    en: 'La Rochelle',
    gr: 'pn',
    def: 'a cíty in waster Fraunce'
}, {
    sc: 'Roterdame',
    en: 'Rotterdam',
    gr: 'pn',
    def: 'a cíty in the Netherlands'
}, {
    sc: 'Salesberry',
    en: 'Salisbury',
    gr: 'pn',
    def: 'a cíty in southren England'
}, {
    sc: 'Statin',
    en: 'Stettin',
    gr: 'pn',
    def: 'a cíty in Poland'
}, {
    sc: 'Straesberry',
    en: 'Strasbourg',
    gr: 'pn',
    def: 'a cíty in north-east Fraunce'
}, {
    sc: 'Turing',
    en: 'Touraine',
    gr: 'pn',
    def: 'ane o the tradítional stewartries o Fraunce'
}, {
    sc: ['Upslo', 'Oslo'],
    en: 'Oslo',
    gr: 'pn',
    def: 'the caipital cíty o Norrowa'
}, {
    sc: 'Utrik',
    en: 'Utrecht',
    gr: 'pn',
    def: 'a cíty in central Netherlands'
}, {
    sc: 'Valsterboom',
    en: 'Falsterbo',
    gr: 'pn',
    def: 'a toun in south-wast Denmark'
}, {
    sc: 'Veinice',
    en: 'Venice',
    gr: 'pn',
    def: 'a cíty in north-east Italy'
}, {
    sc: 'Yearmuith',
    en: '(Great) Yarmouth',
    tr: 'Yarmouth',
    gr: 'pn',
    def: 'a toun in Norfolk, England'
}, {
    sc: 'kintra',
    pr: ['kintra', 'kintrae'],
    en: 'country',
    gr: 'n'
});
/**
 * Phrases
 */

/**
 * Add phrases to dictionary object
 */

G.dict.push({
    sc: ['gie a kythin tae/til'],
    en: 'demonstrate',
    tr: 'gie a kythin til',
    gr: 'v phr'
}, {
    sc: 'at that',
    en: 'with that',
    ex: 'At that, Jamie teuk the gate hame'
});
