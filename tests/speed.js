// Ootpits as per 8 September 2020

// JSON size

console.log((JSON.stringify(G.dict).length / 1000).toFixed(0) + 'kB'); // > 134kB

// Maximum nummer o values tae check agin

let counter = 0;

GLOSSAR.dict.forEach(item => {
    if (item.sc && item.sc.join)
        counter += item.sc.length;
    else if (item.sc)
        counter++;

    if (item.en && item.en.join)
        counter += item.en.length;
    else if (item.en)
        counter++;

    if (item.pr && item.pr.join)
        counter += item.pr.length;
    else if (item.pr)
        counter++;

    if (item.tr && item.tr.join)
        counter += item.tr.length;
    else if (item.tr)
        counter++;

    if (item.pt && item.pt.sc && item.pt.sc.join)
        counter += item.pt.sc.length;
    else if (item.pt && item.pt.sc)
        counter++;

    if (item.pt && item.pt.tr && item.pt.tr.join)
        counter += item.pt.tr.length;
    else if (item.pt && item.pt.tr)
        counter++;

    if (item.pp && item.pp.sc && item.pp.sc.join)
        counter += item.pp.sc.length;
    else if (item.pp && item.pp.sc)
        counter++;

    if (item.pp && item.pp.tr && item.pp.tr.join)
        counter += item.pp.tr.length;
    else if (item.pp && item.pp.tr)
        counter++;

    if (item.pt_pp && item.pt_pp.sc && item.pt_pp.sc.join)
        counter += item.pt_pp.sc.length;
    else if (item.pt_pp && item.pt_pp.sc)
        counter++;

    if (item.pt_pp && item.pt_pp.tr && item.pt_pp.tr.join)
        counter += item.pt_pp.tr.length;
    else if (item.pt_pp && item.pt_pp.tr)
        counter++;

    if (item.pl && item.pl.sc && item.pl.sc.join)
        counter += item.pl.sc.length;
    else if (item.pl && item.pl.sc)
        counter++;

    if (item.pl && item.pl.tr && item.pl.tr.join)
        counter += item.pl.tr.length;
    else if (item.pl && item.pl.tr)
        counter++;

    if (item.neg && item.neg.sc && item.neg.sc.join)
        counter += item.neg.sc.length;
    else if (item.neg && item.neg.sc)
        counter++;

    if (item.neg && item.neg.tr && item.neg.tr.join)
        counter += item.neg.tr.length;
    else if (item.neg && item.neg.tr)
        counter++;
});

console.log('Maximum nummer o values tae check agin: ', counter); // > 4239

// Fuse search wi allevolie button; object literal; Chrome
let results1 = [12.64501953125, 11.31787109375, 6.844970703125, 6.994140625, 4.837890625, 3.279052734375, 4.284912109375, 8.113037109375, 2.812255859375, 3.101806640625, 3.177734375, 3.304931640625, 3.040771484375, 3.2890625, 2.944091796875, 3.051025390625, 4.1240234375, 4.414794921875, 2.532958984375, 2.326904296875, 2.77197265625, 2.486083984375, 2.671875, 4.010986328125, 2.548095703125, 2.52197265625, 2.5419921875, 1.93408203125, 2.5458984375, 2.505859375, 3.652099609375, 2.59716796875, 3.816650390625, 2.57080078125, 3.8232421875, 2.748046875, 2.52099609375, 2.28515625, 2.509765625, 2.55517578125, 2.485107421875, 2.594970703125, 2.6669921875, 2.56396484375, 2.35693359375, 2.331787109375, 2.68505859375, 2.192138671875, 2.660888671875, 2.575927734375, 2.5927734375, 2.653076171875, 2.02783203125, 2.912109375, 2.19482421875, 2.349853515625, 2.581298828125, 2.360107421875, 2.4169921875, 2.50830078125, 2.94580078125, 2.573974609375, 2.61083984375, 2.130126953125, 2.464111328125, 2.3740234375, 2.363037109375, 2.592041015625, 2.227783203125, 2.19287109375, 2.4140625, 2.317138671875, 2.553955078125, 2.434814453125, 2.30224609375, 2.339111328125, 2.57177734375, 2.406982421875, 2.5087890625, 3.386962890625, 2.1669921875, 2.421142578125, 2.590087890625, 2.308837890625, 2.559814453125, 2.36083984375, 2.302978515625, 2.599853515625, 2.08984375, 2.457275390625, 2.59130859375, 2.193115234375, 2.519775390625, 4.187744140625, 2.3349609375, 2.3701171875, 2.42578125, 2.31982421875, 2.150146484375, 2.6650390625, 2.23681640625, 2.464599609375, 2.337890625, 2.142333984375, 1.986083984375, 2.157958984375, 2.642822265625, 1.86669921875, 2.3369140625, 1.880126953125, 1.998046875, 2.37890625, 2.59765625, 2.2431640625, 2.297119140625, 2.52197265625, 2.52587890625, 1.510009765625, 1.903076171875, 1.970947265625, 1.51904296875, 1.89404296875, 1.830810546875, 1.5439453125, 1.716064453125, 1.40625, 1.705810546875, 1.932861328125, 1.528076171875, 1.553955078125, 1.85302734375, 1.419189453125, 1.759765625, 1.568115234375, 1.64990234375, 1.7548828125, 1.699951171875, 1.636962890625, 1.705078125, 2.057861328125, 2.158935546875, 2.582275390625, 2.56201171875, 2.35009765625, 2.69921875, 2.573974609375, 2.14794921875, 2.3740234375, 2.031005859375, 2.595947265625, 2.39404296875, 1.971923828125, 2.263916015625, 6.928955078125, 2.217041015625, 2.509033203125, 2.235107421875, 2.11083984375, 2.552001953125, 2.53564453125, 2.054931640625, 2.152099609375, 2.515869140625, 1.64501953125, 2.366943359375, 2.130126953125, 2.398193359375, 2.361083984375, 2.219970703125, 2.258056640625, 2.011962890625, 1.7626953125, 1.857177734375, 2.5830078125, 1.747802734375, 2.35009765625, 1.68017578125, 1.592041015625, 2.437255859375, 1.93896484375, 1.66015625, 1.875, 1.660888671875, 1.657958984375, 2.171142578125, 1.867919921875, 1.528076171875, 1.735107421875, 1.56298828125, 1.525146484375, 1.845947265625, 1.474853515625, 1.650146484375, 1.862060546875, 1.64306640625, 1.683837890625, 1.863037109375, 1.635009765625, 1.68701171875, 1.866943359375, 1.710205078125, 2.248046875, 1.68603515625, 1.4033203125, 1.996826171875, 2.62109375, 2.371826171875, 2.568115234375, 2.16015625, 2.2080078125, 2.31689453125, 2.089111328125, 2.137939453125, 2.640869140625, 2.35791015625, 2.346923828125, 2.26806640625, 1.781982421875, 2.553955078125, 2.14697265625, 2.154052734375, 2.635986328125, 2.683349609375, 2.164306640625, 2.3740234375, 2.54296875, 2.35205078125, 2.343994140625, 2.330078125, 2.15478515625, 2.39111328125, 2.339111328125, 2.19189453125, 2.33203125, 2.37109375, 2.4560546875, 2.38623046875, 8.901123046875, 4.321044921875, 3.284912109375, 3.333984375, 2.902099609375, 3.11279296875, 3.171142578125, 4.001953125, 2.5068359375, 2.811767578125, 2.72998046875, 2.536865234375, 2.34912109375, 2.424072265625, 2.248046875, 2.484130859375, 2.7080078125, 2.546142578125, 2.34375, 2.580078125, 2.5830078125, 2.321044921875, 2.43994140625, 2.9326171875, 2.15283203125, 1.677001953125, 1.83984375, 1.673095703125, 2.343994140625, 2.55615234375, 2.3310546875, 2.593017578125, 2.346923828125, 3.09619140625, 2.31298828125, 2.18896484375, 2.453125, 2.548095703125, 2.354736328125, 2.538818359375, 2.229736328125, 2.396240234375, 2.3779296875, 2.218017578125, 1.713134765625, 2.10693359375, 2.52294921875, 2.512939453125, 2.508056640625, 2.745849609375, 2.375244140625, 2.27099609375, 2.531982421875, 2.52001953125, 2.527099609375, 2.10888671875, 2.670166015625, 2.6279296875, 2.8037109375, 2.873779296875, 2.365234375, 2.635009765625, 2.874755859375];

let results1_average = parseFloat((results1.reduce((accumulator, currentValue) => {
    return accumulator + parseFloat(currentValue);
}, 0) / results1.length).toFixed(3));

console.log(
    'Object literal average (Chrome 85.0.4183.83):',
    results1_average
); // > 2.527ms

// Fuse search wi allevolie button; fetched JSON; Chrome
let results1a = [12.6181640625, 9.998779296875, 6.93994140625, 6.510986328125, 6.43017578125, 4.69189453125, 3.19287109375, 3.7978515625, 3.27587890625, 2.904052734375, 4.239990234375, 3.1630859375, 2.47412109375, 4.250244140625, 4.2109375, 5.8720703125, 10.072998046875, 6.545166015625, 2.73291015625, 2.212158203125, 2.455810546875, 2.541015625, 2.381103515625, 2.458984375, 2.2900390625, 2.233154296875, 2.472900390625, 2.47509765625, 2.3310546875, 2.31494140625, 2.60986328125, 2.914794921875, 2.2861328125, 2.269775390625, 2.239013671875, 2.6279296875, 2.801025390625, 2.40283203125, 2.52490234375, 2.13818359375, 2.177001953125, 2.1201171875, 2.076904296875, 2.099853515625, 2.2841796875, 2.119140625, 2.658935546875, 2.52587890625, 2.3447265625, 2.364013671875, 2.130859375, 2.35693359375, 2.355224609375, 2.123779296875, 2.637939453125, 2.655029296875, 2.072998046875, 2.297119140625, 2.1181640625, 2.242919921875, 2.367919921875, 2.113037109375, 1.9599609375, 2.110107421875, 2.424072265625, 2.4111328125, 2.427978515625, 2.22509765625, 2.200927734375, 2.6240234375, 2.40185546875, 2.626708984375, 2.301025390625, 2.39306640625, 2.701904296875, 2.464111328125, 2.59033203125, 2.43701171875, 2.177001953125, 2.419189453125, 2.19287109375, 2.66796875, 2.39404296875, 4.521240234375, 2.941162109375, 2.47607421875, 2.494873046875, 2.39990234375, 2.433837890625, 2.36083984375, 2.387939453125, 2.455078125, 2.65185546875, 2.355224609375, 2.494873046875, 2.443115234375, 2.74609375, 2.341064453125, 2.85693359375, 2.364013671875, 2.587890625, 2.64208984375, 2.014892578125, 2.588134765625, 2.326904296875, 2.119873046875, 2.269775390625, 2.1669921875, 2.130126953125, 2.529052734375, 2.09619140625, 2.23388671875, 2.629150390625, 2.425048828125, 2.21923828125, 2.697021484375, 2.032958984375, 2.276123046875, 2.623046875, 1.925048828125, 2.0576171875, 2.31005859375, 2.113037109375, 2.617919921875, 2.130859375, 2.151123046875, 2.135986328125, 1.910888671875, 2.48486328125, 2.35302734375, 6.502197265625, 2.181884765625, 2.26220703125, 2.283935546875, 2.43310546875, 2.408935546875, 2.2548828125, 2.367919921875, 2.52197265625, 2.0830078125, 2.628173828125, 2.528076171875, 2.0771484375, 2.599853515625, 2.34521484375, 2.212890625, 2.169189453125, 2.34912109375, 2.14599609375, 2.126953125, 1.959228515625, 2.490234375, 2.529052734375, 2.02001953125, 2.660888671875, 2.27001953125, 1.93310546875, 2.4150390625, 2.09521484375, 2.114990234375, 2.27294921875, 2.178955078125, 2.441162109375, 2.78173828125, 2.307861328125, 3.14111328125, 2.7978515625, 2.42529296875, 2.383056640625, 2.28271484375, 2.45703125, 2.326904296875, 2.313232421875, 2.384033203125, 2.294189453125, 2.41015625, 2.328857421875, 2.5029296875, 2.101806640625, 2.18896484375, 3.1796875, 2.113037109375, 2.323974609375, 2.32373046875, 2.012939453125, 2.184814453125, 2.38525390625, 2.123046875, 2.320068359375, 2.372802734375, 2.341064453125, 2.780029296875, 2.10107421875, 2.58203125, 2.288818359375, 2.4052734375, 2.285888671875, 2.17822265625, 2.08984375, 2.701904296875, 2.658935546875, 2.153076171875, 2.544921875, 2.387939453125, 2.348876953125, 2.56884765625, 2.386962890625, 2.322998046875, 2.298095703125, 2.138916015625, 2.697998046875, 2.44091796875, 2.14501953125, 2.968994140625, 2.386962890625, 2.171875, 2.374755859375, 2.407958984375, 2.135009765625, 2.636962890625, 2.215087890625, 2.366943359375, 2.620849609375, 2.208984375, 2.19580078125, 2.6279296875, 2.402099609375, 2.65283203125, 2.64990234375, 2.423095703125, 2.6650390625, 2.61669921875, 2.261962890625, 2.456787109375, 2.60791015625, 2.404052734375, 2.31689453125, 2.429931640625, 2.102294921875, 2.69970703125, 2.38720703125, 2.64794921875, 2.190185546875, 2.43505859375, 2.423095703125, 2.438720703125, 1.89208984375, 2.679931640625, 2.377197265625, 2.14697265625, 2.332275390625, 2.4189453125, 2.34521484375, 2.572998046875, 2.112060546875, 2.64501953125, 2.342041015625, 2.0791015625, 2.711181640625, 2.686767578125, 2.415771484375, 2.719970703125, 2.72216796875, 1.978759765625, 2.422119140625, 2.27001953125, 2.218994140625, 2.04296875, 2.623046875, 2.281982421875, 3.393310546875, 2.17919921875, 2.344970703125, 2.633056640625, 2.219970703125, 2.197021484375, 2.3759765625, 1.9697265625, 2.56787109375, 2.68701171875, 2.410888671875, 2.30224609375, 2.541015625, 2.202880859375, 2.244140625, 2.72216796875, 2.382080078125, 2.43310546875, 2.321044921875, 2.02294921875, 2.39794921875, 2.171875, 2.453125, 2.55615234375, 2.411865234375, 2.5498046875, 2.181884765625, 2.389892578125, 2.174072265625, 2.483154296875];

let results1a_average = parseFloat((results1a.reduce((accumulator, currentValue) => {
    return accumulator + parseFloat(currentValue);
}, 0) / results1a.length).toFixed(3));

console.log(
    'JSON average (Chrome 85.0.4183.83):',
    results1a_average
); // > 2.593ms

let differ = ((results1a_average - results1_average) / ((results1a_average + results1_average) / 2) * 100).toFixed(3);

console.log(
    'Chrome object-literal-to-JSON differ:',
    `${(differ < 0 ? "" : "+")}${differ}%`
); // > +2.578%


// Fuse search with allevolie button; object literal; Safari
let results2 = [15.141, 12.885, 11.792, 8.111, 6.233, 6.563, 5.349, 6.344, 5.474, 5.832, 6.110, 5.441, 5.524, 6.249, 4.756, 5.741, 5.793, 6.278, 5.733, 5.645, 5.896, 5.595, 5.691, 6.063, 5.210, 5.643, 5.674, 5.948, 5.461, 5.629, 5.956, 7.698, 5.708, 5.350, 5.535, 6.666, 5.682, 6.213, 5.486, 5.472, 5.629, 5.829, 5.881, 6.607, 5.776, 5.531, 6.200, 5.295, 5.504, 5.371, 5.464, 6.519, 5.519, 5.944, 5.449, 5.071, 6.043, 5.494, 6.500, 5.447, 5.410, 6.820, 5.503, 5.629, 6.227, 5.701, 6.247, 5.935, 6.285, 5.625, 6.195, 5.406, 7.560, 5.499, 5.855, 5.567, 7.255, 5.706, 6.159, 5.127, 6.305, 5.550, 6.683, 5.548, 8.280, 5.075, 5.906, 6.307, 5.577, 6.088, 5.506, 5.918, 5.404, 7.026, 5.406, 6.155, 5.527, 5.914, 5.583, 6.308, 5.898, 6.175, 5.923, 5.466, 5.470, 6.140, 5.886, 6.425, 5.670, 6.489, 5.321, 6.238, 5.559, 6.153, 5.740, 6.320, 5.320, 5.738, 6.022, 6.499, 5.998, 6.258, 5.665, 6.254, 5.480, 6.299, 5.279, 6.035, 5.948, 6.008, 5.577, 6.654, 5.274, 4.843, 6.244, 5.315, 6.396, 6.352, 5.826, 6.442, 5.318, 6.449, 5.546, 6.078, 5.557, 5.474, 5.638, 6.211, 5.824, 5.816, 4.841, 4.295, 4.990, 4.699, 6.353, 5.216, 6.062, 5.553, 6.267, 5.528, 6.201, 5.499, 6.275, 5.686, 6.055, 6.443, 5.692, 6.083, 5.686, 5.649, 7.095, 5.517, 6.197, 5.572, 6.618, 5.644, 6.557, 5.758, 6.052, 5.664, 6.206, 5.589, 6.319, 5.666, 6.482, 5.542, 6.221, 5.515, 6.761, 5.945, 6.394, 6.006, 6.608, 5.866, 6.580, 5.802, 6.316, 5.684, 6.481, 5.518, 6.713, 5.596, 6.146, 5.566, 6.211, 5.761, 5.790, 5.705, 6.706, 5.936, 5.480, 5.866, 5.177, 6.403, 5.624, 6.033, 5.801, 5.829, 5.814, 6.646, 5.956, 6.338, 5.591, 5.669, 5.746, 6.429, 5.378, 6.011, 6.184, 5.810, 7.394, 5.675, 6.086, 5.665, 6.113, 5.634, 7.041, 5.568, 6.544, 5.717, 5.606, 6.133, 6.390, 5.180, 5.281, 5.897, 5.741, 7.203, 5.487, 5.399, 5.675, 6.020, 5.693, 5.735, 5.040, 5.279, 6.432, 5.364, 5.640, 6.193, 5.558, 5.595, 5.336, 7.507, 5.663, 5.484, 6.026, 5.913, 6.285, 5.574, 5.723, 6.453, 5.555, 5.999, 6.571, 5.680, 5.761, 6.237, 5.891, 5.637, 6.272, 5.539, 6.197, 5.599, 7.220, 8.209, 5.543, 5.437, 6.201, 5.714, 5.512, 6.624, 4.859, 5.504, 6.114, 5.868, 5.545, 5.589, 5.010, 5.022];

let results2_average = parseFloat((results2.reduce((accumulator, currentValue) => {
    return accumulator + parseFloat(currentValue);
}, 0) / results2.length).toFixed(3));

console.log(
    'Object literal average (Safari 13.1.2 (14609.3.5.1.5)):',
    results2_average
); // > 5.976ms

// Fuse search with allevolie button; JSON; Safari
let results2a = [16.838, 13.381, 14.019, 8.425, 7.444, 7.113, 7.321, 5.835, 7.162, 6.129, 7.103, 6.886, 6.982, 6.346, 7.375, 6.475, 6.944, 6.943, 6.939, 6.124, 7.064, 6.929, 6.160, 6.332, 6.037, 6.227, 6.779, 6.780, 8.757, 6.469, 5.259, 6.067, 6.582, 6.513, 6.739, 6.931, 6.706, 7.048, 6.242, 6.587, 7.222, 6.010, 6.210, 7.058, 7.112, 6.464, 6.871, 6.513, 7.597, 6.991, 7.295, 6.638, 7.022, 6.281, 6.861, 5.759, 6.478, 7.145, 6.166, 6.101, 6.286, 7.099, 5.649, 6.711, 7.189, 5.968, 7.663, 5.728, 6.059, 6.726, 7.660, 6.505, 6.605, 6.766, 5.957, 5.043, 5.139, 4.254, 4.896, 5.472, 5.649, 7.043, 5.677, 6.935, 5.454, 6.124, 6.615, 6.971, 7.019, 6.408, 6.268, 6.665, 6.223, 6.326, 7.209, 5.746, 6.635, 6.067, 7.368, 6.207, 7.017, 6.431, 6.845, 6.034, 7.209, 6.027, 6.687, 5.771, 6.518, 7.415, 6.760, 7.437, 6.161, 6.157, 6.177, 6.616, 6.629, 7.185, 6.331, 6.020, 6.251, 6.512, 6.753, 6.968, 6.779, 6.815, 6.665, 6.367, 7.530, 6.280, 7.032, 5.838, 6.324, 7.149, 7.645, 7.031, 6.436, 6.979, 5.989, 7.657, 6.056, 6.419, 4.666, 6.273, 6.870, 7.521, 6.327, 6.145, 6.785, 7.470, 6.472, 6.468, 6.924, 7.384, 6.028, 8.511, 6.462, 5.846, 6.347, 6.699, 6.844, 6.575, 6.195, 6.720, 7.521, 7.012, 6.895, 6.657, 6.885, 6.252, 6.801, 6.626, 7.238, 6.294, 6.485, 7.281, 6.713, 6.642, 6.248, 7.484, 6.468, 7.224, 6.131, 6.098, 6.981, 5.962, 5.672, 5.876, 7.472, 5.795, 6.356, 7.542, 6.299, 7.191, 5.908, 7.481, 6.539, 6.930, 6.946, 5.660, 6.545, 6.988, 5.876, 7.195, 6.587, 6.777, 5.717, 7.309, 5.831, 7.391, 6.476, 6.137, 6.872, 5.981, 6.576, 6.509, 6.764, 5.943, 6.182, 6.050, 5.987, 6.887, 6.271, 5.878, 5.789, 7.011, 5.752, 6.031, 4.811, 6.462, 6.062, 5.478, 5.865, 5.776, 7.124, 6.282, 6.967, 6.636, 6.831, 6.366, 6.518, 5.781, 6.883, 5.812, 6.934, 5.782, 7.090, 5.900, 6.628, 6.652, 7.229, 6.154, 7.071, 6.762, 7.117, 6.125, 7.386, 6.692, 7.367, 6.570, 7.420, 7.686, 7.114, 6.314, 6.331, 6.589, 6.910, 5.722, 6.688, 5.811, 7.129, 6.172, 6.943, 6.039, 7.400, 6.170, 6.808, 6.483, 6.892, 5.054, 6.005, 5.954, 6.305, 6.590, 7.204, 5.858, 6.602, 7.279, 6.205, 7.247, 5.917, 5.989, 6.793, 6.554, 6.138, 6.459, 7.525, 5.872, 7.829, 5.827];

let results2a_average = parseFloat((results2a.reduce((accumulator, currentValue) => {
    return accumulator + parseFloat(currentValue);
}, 0) / results2a.length).toFixed(3));

console.log(
    'JSON average (Safari 13.1.2 (14609.3.5.1.5)):',
    results2a_average
); // > 6.640ms

differ = ((results2a_average - results2_average) / ((results2a_average + results2_average) / 2) * 100).toFixed(3);

console.log(
    'Safari object-literal-to-JSON differ:',
    `${(differ < 0 ? "" : "+")}${differ}%`
); // >

// Fuse search wi allevolie button; object literal; Firefox Developer Edition
let results3 = [13, 12, 9, 7, 8, 7, 8, 7, 8, 6, 13, 10, 7, 8, 9, 7, 8, 7, 6, 5, 6, 10, 9, 8, 6, 7, 8, 6, 7, 8, 7, 6, 8, 6, 5, 7, 6, 9, 6, 7, 6, 7, 6, 7, 6, 7, 4, 6, 7, 5, 7, 8, 6, 7, 6, 5, 7, 6, 7, 6, 7, 6, 8, 6, 8, 6, 7, 6, 7, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 5, 7, 6, 7, 6, 8, 7, 6, 7, 8, 7, 6, 7, 6, 5, 7, 5, 8, 6, 5, 7, 6, 7, 6, 7, 6, 9, 7, 6, 7, 8, 7, 4, 6, 7, 5, 7, 6, 7, 5, 7, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 8, 6, 7, 6, 7, 8, 6, 7, 6, 7, 8, 6, 5, 6, 7, 6, 7, 6, 8, 7, 8, 7, 6, 8, 6, 8, 7, 5, 8, 6, 10, 9, 7, 6, 7, 6, 7, 6, 5, 6, 5, 6, 8, 7, 6, 7, 8, 6, 7, 6, 7, 6, 7, 6, 8, 6, 7, 6, 7, 5, 6, 7, 6, 11, 10, 7, 11, 7, 9, 8, 7, 9, 8, 7, 6, 7, 6, 7, 6, 5, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 5, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 5, 7, 6, 7, 6, 8, 6, 7, 6, 7, 6, 7, 6, 5, 7, 6, 7, 8, 10, 7, 6, 7, 6, 5, 6, 8, 6, 5, 7, 6, 7, 6, 5];

let results3_average = parseFloat((results3.reduce((accumulator, currentValue) => {
    return accumulator + parseFloat(currentValue);
}, 0) / results3.length).toFixed(3));

console.log(
    'Object literal average (Firefox Developer Edition 81.0b7:',
    results3_average
); // > 6.770ms

// Fuse search wi allevolie button; JSON; Firefox Developer Edition
let results3a = [14, 13, 9, 8, 14, 9, 11, 9, 8, 9, 7, 9, 8, 7, 6, 7, 6, 7, 6, 7, 14, 8, 6, 7, 8, 9, 8, 7, 6, 7, 6, 9, 6, 7, 6, 7, 8, 7, 5, 8, 7, 8, 7, 6, 8, 6, 7, 8, 5, 7, 5, 7, 6, 7, 8, 6, 7, 8, 7, 6, 7, 8, 7, 6, 8, 5, 7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7, 5, 6, 7, 6, 7, 8, 6, 8, 7, 6, 7, 8, 6, 7, 8, 6, 7, 8, 7, 5, 7, 6, 7, 6, 8, 7, 6, 7, 8, 7, 5, 7, 6, 7, 8, 7, 6, 7, 8, 7, 8, 7, 5, 7, 8, 7, 5, 6, 8, 6, 7, 6, 7, 5, 6, 8, 6, 7, 6, 7, 6, 7, 8, 7, 6, 7, 8, 6, 8, 7, 8, 6, 7, 8, 7, 6, 8, 7, 6, 7, 8, 6, 7, 6, 8, 6, 12, 9, 7, 8, 10, 8, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 6, 8, 7, 9, 7, 6, 8, 7, 6, 7, 6, 7, 6, 7, 8, 7, 8, 7, 8, 7, 6, 7, 6, 5, 7, 8, 7, 8, 6, 8, 6, 7, 6, 7, 8, 7, 9, 7, 6, 7, 6, 7, 5, 6, 7, 6, 5, 7, 6, 5, 6, 7, 6, 7, 5, 7, 8, 6, 7, 5, 6, 7, 8, 7, 6, 7, 6, 7, 6, 7, 8, 7, 8, 6, 7, 6, 8, 6, 5, 7, 6, 7, 6, 7, 8, 6, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 8, 6, 7, 6, 8, 6, 7, 6, 5, 7, 6, 7, 6, 7, 8];

let results3a_average = parseFloat((results3a.reduce((accumulator, currentValue) => {
    return accumulator + parseFloat(currentValue);
}, 0) / results3a.length).toFixed(3));

console.log(
    'JSON average (Firefox Developer Edition 81.0b7:',
    results3a_average
); // > 7.023ms

differ = ((results3a_average - results3_average) / ((results3a_average + results3_average) / 2) * 100).toFixed(3);

console.log(
    'Firefox Developer Edition object-literal-to-JSON differ:',
    `${(differ < 0 ? "" : "+")}${differ}%`
); // > +3.669%

/*

Based on 300 searches per browser per JS object literal, and per JSON
134kB
Maximum nummer o values tae check agin:  4239

Object literal average (Chrome 85.0.4183.83): 2.527
JSON average (Chrome 85.0.4183.83): 2.593
Chrome object-literal-to-JSON differ: +2.578%

Object literal average (Safari 13.1.2 (14609.3.5.1.5)): 5.976
JSON average (Safari 13.1.2 (14609.3.5.1.5)): 6.64
Safari object-literal-to-JSON differ: +10.526%

Object literal average (Firefox Developer Edition 81.0b7: 6.77
JSON average (Firefox Developer Edition 81.0b7: 7.023
Firefox Developer Edition object-literal-to-JSON differ: +3.669%

*/
